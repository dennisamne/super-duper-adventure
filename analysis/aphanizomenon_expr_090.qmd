---
title: "Aphanizomenon_90"
author: "Dennis Amnebrink"
affiliation-title: "Linnaeus University"
title-block-banner: true
date: now
editor: visual
toc: true
prefer-html: true
number-sections: true
format:
  html:
     code-fold: true
     self-contained: true
---

```{r}
#| label: libraries
#| warning: false
library(data.table)
library(tidyverse)
library(vegan)
library(rain)
library(ggConvexHull)
library(DT)
library(kableExtra)
library(Hmisc)
library(patchwork)
library(ggtext)
library(gridExtra)
library(scales)
```

```{r}
#| label: colourscheme treatments
#| warning: false
GEOM_COL_COLOURS = c(
  RColorBrewer::brewer.pal(12, name = 'Paired'))

SEASON_COLOURS = c("spring" = "#33A02C", "summer" = "#E31A1C",  "autumn" =  "#FF7F00", "winter" = "#1F78B4")
```

```{r}
#| label: files
#| warning: false
#| cache: true

# Loading annotation file of expressed genes
  eggnog_names <- c("Geneid", "MAG", "contig", "Start", "End", "Strand", "Length", "seed_eggNOG_ortholog", "seed_ortholog_evalue", "seed_ortholog_score", "Predicted_taxonomic_group", "Predicted_protein_name", "Gene_Ontology_terms", "EC_number", "KEGG_ko", "KEGG_Pathway", "KEGG_Module", "KEGG_Reaction", "KEGG_rclass", "BRITE", "KEGG_TC", "CAZy", "BiGG Reaction", "tax_scope:eggNOG_taxonomic_level_used_for_annotation", "eggNOG_OGs", "bestOG", "COG_Functional_Category", "eggNOG_free_text_description", "sample", "counts")
  
  eggnog_table <- read_tsv("../data/eggnog_table_long.tsv.gz", col_types = cols(Start = col_integer(), End = col_integer(), Length = col_integer(), counts = col_integer(), X7 = col_character())) %>%
                             separate(Chr, c("MAG", "contig"), sep ="_k", remove = TRUE) 
  eggnog_table$sample <- sub('.non_rRNA.pe.bowtie2.q5', '', eggnog_table$sample)
   eggnog_table$sample <- sub('.ca.pesickle.pe.bowtie2.sorted.unmappedpairs.pe.bowtie2.q5', '', eggnog_table$sample) 
   eggnog_table$sample <- sub('.lane00[0-9].ca.pesickle.pe.bowtie2.q5', '', eggnog_table$sample) 
   eggnog_table$sample <- sub("^", "P", eggnog_table$sample)
   eggnog_table$sample <- sub("PP", "P", eggnog_table$sample)
   eggnog_table$sample <- sub(".sorted.bam", "", eggnog_table$sample)
   
   colnames(eggnog_table) <- eggnog_names
   
   eggnog_table <- eggnog_table %>%
      mutate(Predicted_protein_name = ifelse(Geneid %in% c("OFJACKGI_02436","OFJACKGI_00660","OFJACKGI_02602"), paste0("psbA"),paste0(Predicted_protein_name))) # These two names were annotated as pufM, as this is unreasonable, they were compared against the prokka annotation which then was used to verify that they are instead psbA
   
   # Loading date file/sample key
   lmo_id_date <- read_tsv("../data/lmo_id_date.tsv.gz") %>%
    dplyr::select(1, 2) %>% 
    dplyr::rename(dates=2) %>%
    dplyr::rename(sample="Sample") %>%
    mutate(season = ifelse(grepl("201[0-9]-0[3-5]-", dates), "spring",
                           ifelse(grepl("201[0-9]-0[6-8]-", dates), "summer",
                                  ifelse(grepl("201[0-9]-09-|201[0-9]-10-|201[0-9]-11-", dates), "autumn", "winter")))) %>%
    mutate(filter_frac = ifelse(grepl("201[2-5]", dates), "filtered", "unfiltered")) %>%
    mutate(year = str_extract(dates, "[0-9][0-9][0-9][0-9]"))
  lmo_id_date$sample <- sub('P12052_1', 'P12052_3', lmo_id_date$sample) 
  
  #Taxonomy file
  BACL_taxonomy <- read_tsv("../data/BACL_identities.tsv.gz") %>%
    separate("Taxonomy", c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species"), sep = ";[a-z]__", remove = T) %>%
    mutate(location = ifelse(grepl("*P2236*",MAG ), "redox",
                             ifelse(grepl("*P1994*", MAG), "transect",
                                    ifelse(grepl("*SRR*", MAG), "ask√∂", "LMO"))))
  
  # Orf-file incluing only expressed genes
#cds_table<- read_tsv("../data/cds_counts_filtered.tsv") #This is the od-file, used for now.

COG_cats <- read_tsv("../data/COG_categories.tsv") %>%
  rename(COG_Functional_Category = "COG_category")
 

lmo_metadata <- read_tsv("../data/LMO_metadata1.tsv.gz", col_types = cols(.default = col_number(), Chla_Average = col_number(), Date = col_datetime())) %>% subset(Date > "2016-01-01" & Date < "2017-12-31") %>%
rename(dates = "Date")

#Dataframe with the annotated genes, even those not expressed
all_annotations <- read_tsv("../data/eggnog_annotated.tsv.gz") %>%
  select(1, "Chr", "X6")


# This file is to connect the LMO-cruise number with the NGI-project ID's
sample_key <- read_csv("../data/samplesheet.csv") %>%
  mutate(sampleDate = str_extract(fastq_1, "P[0-9]*_[0-9]*")) %>%
  select(sample, sampleDate)

# Reading in sample translation for the LMO-numbers (used to join cds_table with sample_ID file)
samplesheet <- read_csv("../data/samplesheet.csv") %>%
  rename(LMO_ID = "sample", sample = 2) %>%
  select(-3) %>%
  mutate(sample = gsub("./samples/","", sample),
         sample = gsub(".r1.fastq.gz","", sample),
         sample = gsub(".lane00[0-9]","", sample)
         )

cds_table <- read_tsv("../data/alneberg_bacls0.90.fc.CDS.tsv.gz", comment = "#") %>%
  separate(Chr, c("MAG", "contig"), sep = "_k") %>% #extracting MAG name
  filter(MAG == "P1994_122_bin236") %>% #Selecting relevant MAG
  pivot_longer(cols = 8:ncol(.), names_to = "sample") %>% #Long format
  mutate(sample = gsub(".bam","", sample)) %>% #Removing .bam for joining in with sample file later
  rename(LMO_ID = "sample",
         counts = "value") %>% #Matching names for samplesheet
  inner_join(samplesheet, by = "LMO_ID") %>%
  select(-LMO_ID)

# The new overall stats
new_reads_stats <- read_tsv("../data/megahit.prokka.overall_stats.tsv.gz")

#Reading in the total reads from the assembly
assembly_reads <- fread("../data/megahit.prokka.counts.tsv.gz", sep = "\t") %>%
  group_by(sample) %>%
  summarise(sample_counts = sum(count)) %>%
  ungroup() %>%
  inner_join(sample_key, by = "sample") %>%
  select(-sample) %>%
  rename(sample = "sampleDate")

LMODate <- read_tsv("../data/LMOCruiseToDate.tsv") %>%
   mutate(season = ifelse(grepl("201[0-9]-0[3-5]-", Date), "spring",
                           ifelse(grepl("201[0-9]-0[6-8]-", Date), "summer",
                                  ifelse(grepl("201[0-9]-09-|201[0-9]-10-|201[0-9]-11-", Date), "autumn", "winter"))))

# Reading in phytoplankton count figure and converting to understandable format and joining in dates
phytoCount <- read_tsv("../data/phyto_counts_USE_20210614.tsv") %>% 
  inner_join(LMODate, by = "LMO") %>%
  filter(!is.na(Biomass_mgC_m3)) %>%# Removing NA's from dataset as they interfere with operations
  mutate(Year = str_extract(Date, "[0-9][0-9][0-9][0-9]"))

#Total reads
total_reads <- read_tsv("../data/community_assembly_stats/total_reads.tsv", col_names = F) %>%
  separate(X1, c("LMO_ID","total_reads"), sep = "              ") %>%
  mutate(total_reads = gsub(",","", total_reads) %>% as.numeric()) %>%
  inner_join(samplesheet, by = "LMO_ID")

#rRNA depleted reads
non_rRNA <- read_tsv("../data/community_assembly_stats/non_rRNA_reads.tsv", col_names = c("LMO_ID", "non_rRNA"))
```

```{r}
# Creating the overview of the reads from both assembly and mag reads
metaT_seq_stats <- total_reads %>%
  inner_join(non_rRNA, by = "LMO_ID") %>%
  inner_join(assembly_reads %>% rename(assembly_CDS = "sample_counts"), by = "sample") %>%
  inner_join(cds_table %>%
               group_by(sample) %>%
               summarise(MAG_CDS = sum(counts)) %>% 
               ungroup(),
             by = "sample") %>%
  select(sample, total_reads, non_rRNA, assembly_CDS, MAG_CDS)


write_tsv(metaT_seq_stats, "../results/metaT_sequencing_statas.tsv")
```

```{r}
#Total number of orfs

cds_table %>%
  distinct(Geneid)

#Number of orfs expressed

cds_table %>%
  filter(counts > 0) %>%
  distinct(Geneid)

```

```{r}
#| label: filtering-low-abundant-dates
#| warning: false
#| cache: true

genes_and_paths_top50 <- cds_table %>% 
  inner_join(lmo_id_date, by = "sample") %>%
  dplyr::filter(filter_frac == "unfiltered") %>%
  group_by(dates, Geneid, MAG) %>% 
  summarise(counts = as.integer(mean(counts))) %>%
  ungroup() %>%
  inner_join(cds_table %>% distinct(Geneid, Length)) %>%
  group_by(MAG, dates) %>%
  mutate(t = counts/Length) %>%
  mutate(tpm = t/sum(t)*1e6) %>%
  ungroup() %>%
  dplyr::select(-t) 
 
cds_table_filtered <- cds_table %>%  inner_join(lmo_id_date, by = "sample") %>% dplyr::filter(filter_frac == "unfiltered") %>% group_by(dates, MAG, Geneid) %>% summarise(counts = mean(counts)) %>% ungroup() %>% group_by(MAG, dates) %>% summarise(counts = sum(counts)) %>% ungroup() %>% dplyr::filter(counts >= 3000)

genes_and_paths_top50 %>% semi_join(cds_table_filtered, by = c("MAG","dates")) -> filtered_genes_and_paths_top50
```

# Intro

This document handles gene expression analysis of BACL63, or P1994_122_bin236, short about the BACL: It is 99.89% complete, 0.89% contamination, of which 80% is explained by strain heterogeneity (closely related contamination).

## Expression dynamics

```{r}
# Calculate tpm based on the total community counts for the LMO-station
# Calculate within Apha-tpm (already done in the filtered genes and paths)

apha_dyn <- cds_table %>% 
  inner_join(lmo_id_date, by = "sample") %>%
  filter(MAG == "P1994_122_bin236") %>%
  dplyr::filter(filter_frac == "unfiltered") %>%
  group_by(MAG, sample) %>%
  summarise(mag_counts = sum(counts)) %>%
  ungroup() %>%
  inner_join(assembly_reads, by = "sample") %>%
  group_by(sample) %>%
  mutate(apha_fraction = mag_counts/sum(sample_counts)) %>%
  ungroup() %>%
    inner_join(lmo_id_date, by = "sample") 
  
# Plot community dynamics
apha_dyn %>%
  ggplot(mapping = aes(x = dates, y = round(apha_fraction*100, digits = 2))) +
  geom_line() +
  geom_point() +
  theme_bw() +
  theme(axis.text = element_text(size = 10, colour = "black"),
        axis.title = element_text(size = 10, colou = "black"),
        panel.grid = element_blank()) +
  scale_x_date(date_breaks = "2 months", date_labels = "%b",limits = as.Date(c('2016-03-01','2017-12-12'))) +
  xlab("Month") +
  ylab(bquote('Aphanizomenon read percentage')) +
   annotate("rect",
    xmin = as.Date.character("2016-03-01"),
    xmax = as.Date.character("2016-05-31"),
    ymin = -Inf,
    ymax = Inf,
    alpha = .37,
    fill = "grey"
    ) +
  annotate("rect",
    xmin = as.Date.character("2016-09-01"),
    xmax = as.Date.character("2016-11-30"),
    ymin = -Inf,
    ymax = Inf,
    alpha = .37,
    fill = "grey"
    ) +
    annotate("rect",
    xmin = as.Date.character("2017-03-01"),
    xmax = as.Date.character("2017-05-31"),
    ymin = -Inf,
    ymax = Inf,
    alpha = .37,
    fill = "grey"
    ) +
     annotate("rect",
    xmin = as.Date.character("2017-09-01"),
    xmax = as.Date.character("2017-11-30"),
    ymin = -Inf,
    ymax = Inf,
    alpha = .37,
    fill = "grey"
    ) 

ggsave("../results/Apha090_Expr_Dyn.pdf")

plotExpr <- ggplot2::last_plot()
```

## metaT Dynamics and Biovolume correlation

```{r}
metaT_biovol <- apha_dyn %>%
  group_by(dates) %>%
  summarise(apha_fraction = mean(apha_fraction)) %>%
  ungroup() %>%
  rename(Date = "dates") %>%
   inner_join(phytoCount %>% # joining in the biomass
               #filter(Year != "2020") %>%
               filter(Genus %in% c("Aphanizomenon")) %>% 
               group_by(Date, Genus) %>% 
               summarise(Biovol_mm3_m3 = sum(Biovol_mm3_m3)) %>% 
               ungroup() %>%
               select(-Genus),
             by = "Date"
  ) %>% 
  filter(Biovol_mm3_m3 > 0) %>%
  column_to_rownames("Date") 

cor.test(metaT_biovol$apha_fraction, metaT_biovol$Biovol_mm3_m3, method = "pearson", use = "complete.obs")

#0.017 for metaT vs biomass
# File generated from 16S script
ASV_biomass_corr <- read_tsv("../data/ASV_biomass_corrDf.tsv")



ASV_bioVolCorr <- ASV_biomass_corr %>%
  inner_join(phytoCount %>% 
               filter(Genus == "Aphanizomenon") %>%
               filter( Year %in% c("2016","2017")),
             by = "Date"
    
  ) %>%
  filter(Biovol_mm3_m3 > 0) %>%
  select(Biovol_mm3_m3, relab)

cor.test(ASV_bioVolCorr$relab, ASV_bioVolCorr$Biovol_mm3_m3, method = "pearson",use = "complete.obs")

ASV_metaT_corr <- ASV_biomass_corr %>%
  select(relab,Date) %>%
  inner_join(apha_dyn %>%
    group_by(dates) %>%
    summarise(apha_fraction = mean(apha_fraction)) %>%
    ungroup() %>%
    rename(Date = "dates"),
    by = "Date") 


cor.test(ASV_metaT_corr$relab, ASV_metaT_corr$apha_fraction, method = "pearson",use = "complete.obs")

metaT_biomass %>%
  rownames_to_column("Date") %>%
  mutate(Date = as.Date(Date)) %>%
  inner_join(phytoCount %>% 
               filter(Genus == "Aphanizomenon") %>%
               filter( Year %in% c("2016","2017")),
             by = "Date"
    
  ) %>%
  filter(Biovol_mm3_m3 > 0) %>%
  ggplot(mapping = aes(x = apha_fraction, y = Biovol_mm3_m3, colour = Year)) +
  geom_point()

metaT_biovol <- metaT_biomass %>%
  rownames_to_column("Date") %>%
  mutate(Date = as.Date(Date)) %>%
  inner_join(phytoCount %>% 
               filter(Genus == "Aphanizomenon") %>%
               filter( Year %in% c("2016","2017")),
             by = "Date"
    
  ) %>%
  filter(Biovol_mm3_m3 > 0) %>%
  select(Biovol_mm3_m3, apha_fraction) %>%
  as.matrix()

  cor.test(metaT_biovol[1:17,1], metaT_biovol[1:17,2], method = "pearson",use = "complete.obs") # 2016
  cor.test(metaT_biovol[18:31,1], metaT_biovol[18:31,2], method = "pearson",use = "complete.obs") # 2017

  cor.test(metaT_biovol[,1], metaT_biovol[,2], method = "pearson",use = "complete.obs")

  metaT_biomass[1:17,]

phytoCount %>% filter(Genus == "Aphanizomenon") %>%
filter( Year %in% c("2016","2017")) %>%
  ggplot(mapping = aes(x = , y = )) +
  geom_point()
```


## PCoA

PCA plotting of Aphanizomenon orf-level expression based on bray-curtis distances of hellinger transformed counts produces a clear separation between summer expression and the three other seasons (@fig-PCA_orf_level). One could take it a step further and separate summer into early- and late summer respectively.

```{r}
#| label: fig-PCA_orf_level
#| warning: false
#| fig-cap: "PCA of orf-level functional expression for Aphanizomenon during years 2016-2017. Colours denote season and shape year."
orf_mat <- filtered_genes_and_paths_top50 %>%
  filter(MAG == "P1994_122_bin236") %>%
  select(dates, Geneid, counts) %>%
  pivot_wider(names_from ="Geneid", values_from = counts, values_fill = 0) %>%
  column_to_rownames("dates") %>%
  as.matrix()

# Hellinger transformation and then bray-curtis distances

PCA <- rda(decostand(orf_mat, method = "hellinger"), distance = "bray")

eigenvalues <- as.data.frame(PCA$CA$eig) %>%
    rownames_to_column("PC_axes") %>%
    rename(eigenvalues = "PCA$CA$eig") %>%
    mutate(eigenvalues_variation_explained = (eigenvalues/sum(eigenvalues) * 100))

pca_df <- as.data.frame(PCA$CA$u) %>%
  rownames_to_column("dates") %>%
  mutate(dates = as.Date(dates)) %>%
  inner_join(lmo_id_date %>% distinct(dates, season), by = "dates") %>%
  as.data.frame()

pca_df %>%
  mutate(dates2 = str_extract(dates, "[0-9][0-9]-[0-9][0-9]$")) %>%
  mutate(year = str_extract(dates, "[0-9][0-9][0-9][0-9]")) %>%
  ggplot(mapping = aes(x = PC1, y = PC2, text = dates2, colour = season, fill = season, label = dates2, shape = year)) +
  geom_point(size = 2) +
  geom_text(nudge_x = 0.023, size = 3, nudge_y = 0.005, show.legend = FALSE) +
  scale_colour_manual('Season',values = SEASON_COLOURS) +
  scale_fill_manual('Season',values = SEASON_COLOURS) +
  scale_shape_manual('Year', values = c(16,17)) +
  xlab(paste("PCoA 1", round(eigenvalues$eigenvalues_variation_explained[1], digits = 2),"%", sep = " ")) +
  ylab(paste("PCoA 2", round(eigenvalues$eigenvalues_variation_explained[2], digits = 2),"%", sep = " ")) +
  theme_minimal() +
  theme(panel.grid = element_blank(),
        axis.text.y = element_text(size = 10, colour = "black"),
        axis.text.x = element_text(size = 10, colour = "black"),
        axis.title = element_text(size = 10, colour = "black"),
        legend.text = element_text(size = 10, colour = "black"), 
        legend.title = element_text(size = 10, colour = "black", face = "bold"),
        legend.position = "bottom"
  ) +
  geom_vline(xintercept = 0, linetype = "dashed", size = 0.5) +
  geom_hline(yintercept=0, linetype="dashed", size = 0.5) +
  geom_convexhull(aes(x = PC1, y = PC2, group = season, fill = season), alpha = 0.2, show.legend = FALSE) +
  guides(fill = FALSE)

ggsave("../results/Apha090_PCA.png", bg = "white")

p1 <- ggplot2::last_plot()
```

## Correlation with PCA

```{r}
# Defining the function that will put the corr-table together
 flattenCorrMatrix <- function(cormat, pmat) {
  ut <- upper.tri(cormat)
  data.frame(
    row = rownames(cormat)[row(cormat)[ut]],
    column = rownames(cormat)[col(cormat)[ut]],
    cor  =(cormat)[ut],
    p = pmat[ut]
    )
 }
 # Doing the PCA to get the PC1 axis
aphani.u <- as.data.frame(PCA$CA$u) %>%
    rownames_to_column("dates") %>%
    mutate(type = "sample") %>%
  mutate(season = ifelse(grepl("201[0-9]-0[3-5]-", dates), "spring",
                         ifelse(grepl("201[0-9]-0[6-8]-", dates), "summer",
                                ifelse(grepl("201[0-9]-09-|201[0-9]-10-|201[0-9]-11-", dates), "autumn", "winter")))) %>%
  mutate(year = str_extract(dates, "[0-9][0-9][0-9][0-9]"))
  aphani.u$dates <- as.Date(aphani.u$dates)
  aphani.u$julian <- julian(aphani.u$dates, origin = as.Date("2016-01-01"))
  aphani.u <- aphani.u %>% mutate(julian =ifelse(year == "2016", julian(aphani.u$dates, origin = as.Date("2016-01-01")), julian(aphani.u$dates, origin = as.Date("2017-01-01")))) 
  
  PC1_df <- aphani.u %>% select(dates, PC1)
  
  PC1_env_var <- PC1_df %>% 
    left_join(lmo_metadata, by = "dates") %>%
    select(PC1, Temperature_C, Chla_Average, Nitrate_Average, dates, Phosphate_Average) %>%
    column_to_rownames("dates") 
    
  res <- rcorr(as.matrix(PC1_env_var), type = "spearman") 
     
  hmmm <- as.data.frame(flattenCorrMatrix(res$r, res$P)) %>%
    arrange(desc(cor))
  

  kable(hmmm %>% filter(row == "PC1")) %>%
    kable_styling(bootstrap_options = c("striped", "hover")) %>%
   add_header_above(c("Table 1. Correlation of PC1 with environmental parameters" = 4), font_size = 18) %>%
   footnote(general = "The high correlation between PC1 and temperature supports the notion that PC1 represents seasonality")
```

## Aphanizomenon genes correlated with PC1.(deprecated)

First we see a table of the categories found within the positively correlated fraction, summing up how many genes that goes into each category, there are 82 positively correlated genes in total, out of which 63 are annotated. These 63 genes have been grouped into categories based on their function. There are 4 main categories that seems to have coherency, N-fixation, phososynthesis and pigments,Electron transport chain, ribosomal, the rest (annotated and not annotated) goes into the "other" category. All the genes for each of these figure are plotted in the graphs below.

-   The criteria for having a correlation of interest is r \> 0.7 for positive- and r \< -0.7 for negative correlation.

```{r}
#Plotting the significant genes
all_sig_genes <- read_tsv("../data/sig_corr_genes") %>%
  rename(Geneid = "column") %>%
  filter(cor > 0.7 | cor < -0.7 ) %>%
   mutate(type = ifelse(grepl("^-", cor), "neg", "pos")) # Search for genes that are not significant when looking for complete operons for example, so redo this table without the filtering criterra, and create a new table.
aph_sig_genes <- all_sig_genes %>%
  filter(MAG == "P1994_122_bin236")

cds_table %>%
    left_join(lmo_id_date, by ="sample") %>%
    filter(filter_frac == "unfiltered") %>%
    group_by(dates, Geneid, MAG) %>% 
    summarise(counts = as.integer(mean(counts))) %>%
    ungroup() %>%
    inner_join(cds_table %>% distinct(Geneid, Length)) %>%
    group_by(dates, MAG) %>%
    mutate(t = counts/Length) %>%
    mutate(tpm = t/sum(t)*1e6) %>%
    ungroup() %>%
    select(-t) %>%
    semi_join(aph_sig_genes, by = "Geneid") %>%
    left_join(aph_sig_genes, by ="Geneid") %>%
    group_by(type, dates) %>%
    summarise(tpm = sum(tpm)) %>%
    ungroup() %>%
    ggplot(mapping = aes(x = dates, y = tpm))+
      geom_line(aes(colour = type)) +
      scale_x_date(date_breaks = "1 month", date_labels = "%Y %m",
          limit=c(as.Date("2016-01-01"),as.Date("2017-12-30"))) +
      theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
      ggtitle("Fig.1 Genes positively and negatively correlated with PC1, Aphanizomenon") +
      xlab("Dates \n Shows a very nice inverse relationship \n may indicate different functionality \n across seasons")

```

## Rain

```{r rain_final_52_weeks_orf_level}
#| label: rain-run
#| warning: false
#| cache: true

for_rain <- cds_table %>%
    inner_join(lmo_id_date, by = "sample") %>%
    filter(filter_frac == "unfiltered") %>%
    filter(MAG == "P1994_122_bin236") %>%
    group_by(MAG, dates) %>%
    mutate(t = counts/Length) %>%
    mutate(tpm = t/sum(t)*1e6) %>%
    ungroup() %>%
    select(-t) %>%
    group_by(Geneid, MAG, dates) %>%
    summarise(tpm = sum(tpm)) %>%
    ungroup()

# Before the loop
all_weeks <- as.data.frame(seq(from = 1, to = 104, by = 1)) 

colnames(all_weeks) <- "week"

# Making the table again with counts, to exclude low counts, use this as a semijoin by Geneid beforfe spreading

counts_filter <- cds_table %>%
    inner_join(lmo_id_date, by = "sample") %>%
    filter(filter_frac == "unfiltered") %>%
    filter(MAG == "P1994_122_bin236") %>%
    group_by(MAG, dates, Geneid) %>%
    mutate(counts = mean(counts)) %>%
    ungroup() %>%
    select(Geneid, counts, dates) %>%
    group_by(Geneid) %>%
    summarise(tot_counts = sum(counts)) %>%
    ungroup() %>%
    filter(tot_counts > 100)

counts_filter2 <- cds_table %>%
    inner_join(lmo_id_date, by = "sample") %>%
    filter(filter_frac == "unfiltered") %>%
    filter(MAG == "P1994_122_bin236") %>%
    group_by(MAG, dates, Geneid) %>%
    mutate(counts = mean(counts)) %>%
    ungroup() %>%
    select(Geneid, counts, dates) %>%
    semi_join(counts_filter, by = "Geneid") %>%
    group_by(Geneid) %>%
    tally() %>%
    ungroup() %>%
    filter(n > 5)
  
# This works, now make the argument for counts in 2 samples or less, e.g counts != 0 in 
mag_time_points <- for_rain %>%
  mutate(year_day = julian(dates, origin = as.Date("2016-01-01"))) %>%
  mutate(week = round(year_day/7))  %>%
  semi_join(filtered_genes_and_paths_top50, by = c("MAG","dates")) %>%
  semi_join(counts_filter, by = "Geneid") %>%
  filter(MAG == "P1994_122_bin236") %>%
  select(week, Geneid, tpm) %>%
  spread(Geneid, tpm, fill = 0)

 # Joining in to create the measure.sequence vector to account for uneven sampling points (i.e variation between weeks)
vec <- all_weeks %>%
  left_join(mag_time_points, by = "week") %>%
  column_to_rownames("week") %>%
  replace(is.na(.), 0) %>%
  mutate(vector = ifelse(rowSums(.) > 0, 1,0)) %>% #This vector says that if there is a week put a 1, otherwise a 0
  select(vector)


 mag_time_points <- mag_time_points  %>% 
 column_to_rownames("week") 
 
 # Creating the matrix
mag_time_points <- for_rain %>%
  mutate(year_day = julian(dates, origin = as.Date("2016-01-01"))) %>%
  mutate(week = round(year_day/7))  %>%
  semi_join(filtered_genes_and_paths_top50, by = c("MAG","dates")) %>%
  semi_join(counts_filter2, by = "Geneid") %>%
  filter(MAG == "P1994_122_bin236") %>%
  select(week, Geneid, tpm) %>%
  spread(Geneid, tpm, fill = 0) %>%
  column_to_rownames("week") %>%
  as.matrix()


#Running RAIN

df <- rain::rain(mag_time_points, deltat = 1, period = 52, nr.series = 1 , measure.sequence= vec$vector, adjp.method = "Bonferroni", method = 'longitudinal')


#Calulating the coefficient of variation to use as a treshold for plotting.

CV_info <- filtered_genes_and_paths_top50 %>%
  #inner_join(season_info, by = "Geneid") %>%
  group_by(Geneid) %>%
  summarise(CV = (sd(tpm)/mean(tpm)) *100) %>%
  ungroup() 

# Done on filtered dates > 3000 counts
df %>%
  rownames_to_column("Geneid") %>% 
  inner_join(CV_info, by = "Geneid") %>%
  mutate(type = ifelse(pVal <= 0.05 & CV >= 20, "sig","non-sig")) %>%
  write_tsv(.,"../data/cyclical_genes_aphani090.tres.tsv")
  

cyc.genes.tres <- read_tsv("../data/cyclical_genes_aphani090.tres.tsv")
```

To identify seasonal expression patterns, a [RAIN](https://pubmed.ncbi.nlm.nih.gov/25326247/) analysis on the orf-level of Aphanizomenon revealed that `r length(which(cyc.genes.tres$fdr <= 0.05))` out of `r nrow(cyc.genes.tres)` showed significant seasonal expression patterns. The annotation of every orf and its corresponding fdr-adjusted p-value is provided in table @fig-Rain_table_supp. (Quarto doesn't recognize datatable-output as a table so bear with me here). Analysis was run on the within-mag normalised tpm values (all genes in the MAG summarised per date adds up to a million).

```{r}
#| label: fig-Rain_table_supp
#| fig-cap: Table summarising RAIN output on the Aphanizomenon orf-level analysis.
#| warning: false

DT::datatable(cyc.genes.tres %>% 
        left_join(eggnog_table %>% distinct(Geneid, Predicted_protein_name , eggNOG_free_text_description), 
                  by = "Geneid") %>%
        arrange(Predicted_protein_name), filter = "top")  
```

Following this, the seasonality of all the significant genes was identified based on their max expression value date (I.e the season of the date with highest expression determined the seasonality of a particular gene). Adding a smoothing function the temporal optima becomes clear, but even plotting every individual gene together produce a simiar result @fig-rain_genes. I have a slight suspicion that the summer cluster is correlated with a higher growth, I think the small bump seen in winter might correlate with the higher phytoplankton counts on the 15th of Feb in 2017. (**VERIFY THIS**).

```{r}
#| label: fig-rain_genes
#| fig-cap: Z-score normalised expression of Aphanizomenon orfs that were significant in RAIN.
#| fig-subcap: 
#|   - "Smoothing function summarising the seasonal clusters"
#|   - "Plotting every orf individually and colouring it according to the season of highest expression."
#| warning: false

#Proper way to calculate this would be to do a mean of tpm values per season and then select highest value and assign this season to the gene.

#Seasonal preference as determined by highest seasonal average
season_info <- filtered_genes_and_paths_top50 %>%
  select(dates, Geneid, tpm) %>%
  pivot_wider(names_from = Geneid, values_from = tpm, values_fill = 0) %>%
  pivot_longer(cols =c(2:ncol(.)) , names_to = "Geneid", values_to = "tpm") %>%
  inner_join(lmo_id_date %>% distinct(dates, season), by = "dates") %>%
  semi_join(cyc.genes.tres %>% filter(type == "sig"), by = "Geneid") %>%
  group_by(Geneid, season) %>%
  summarise(tpm = mean(tpm)) %>%
  ungroup() %>%
  group_by(Geneid) %>%
  filter(tpm == max(tpm)) %>%
  ungroup() %>%
  select(-tpm)

# Unsmoothed version
filtered_genes_and_paths_top50 %>%
  inner_join(season_info, by = "Geneid") %>%
  group_by(Geneid) %>%
  mutate(zscore = (tpm - mean(tpm))/ sd(tpm) ) %>%
  ungroup() %>%
  semi_join(cyc.genes.tres %>% filter(type == "sig"), by = "Geneid") %>%
  ggplot(mapping = aes(x = dates, y = zscore, colour = season, group = Geneid)) +
  theme_bw() +
  geom_line() +
  scale_colour_manual('Season', values = SEASON_COLOURS)


#Trying an alternative definition based on the peak of the phase (i.e week where peak is identified) -> Better for consistency with analysis

DateWeek_key <- for_rain %>%
  mutate(year_day = julian(dates, origin = as.Date("2016-01-01"))) %>%
  mutate(week = round(year_day/7)) %>%
  distinct(week, dates)

SeasInfo <- cyc.genes.tres %>%
  filter(type == "sig") %>%
  inner_join(DateWeek_key %>% 
               rename(phase = "week"),
             by = "phase") %>%
  inner_join(lmo_id_date %>% distinct(dates, season),  by = "dates") %>%
  select(Geneid, season)
 
filtered_genes_and_paths_top50 %>%
  group_by(Geneid) %>%
  mutate(zscore = (tpm - mean(tpm))/ sd(tpm) ) %>%
  ungroup() %>%
  semi_join(cyc.genes.tres %>% filter(type == "sig"), by = "Geneid") %>%
  inner_join(season_info, by = "Geneid") %>%
  ggplot(mapping = aes(x = dates, y = zscore, colour = season, group = Geneid)) +
  theme_bw() +
  geom_line() +
  scale_colour_manual('Season', values = SEASON_COLOURS) +
  scale_x_date(date_breaks = "2 months", date_labels = "%b",limits = as.Date(c('2016-03-01','2017-12-12'))) +
  xlab("Month") +
  xlab("Month") +
  ylab("Z-score") +
  theme(axis.text.y = element_text(size = 10, colour = "black"),
        axis.text.x = element_text(size = 10, colour = "black"),
        axis.title = element_text(size = 10, colour = "black"),
        legend.text = element_text(size = 10, colour = "black"), 
        legend.title = element_text(size = 10, colour = "black", face = "bold"),
        legend.position = "bottom"
  )

ggsave("../results/RAIN_classification_seasons090.png")
```

```{r}
#| label: tbl-SeasonGeneNumbers
#| tbl-cap: "Number of genes in each seasonal cluster."
#| warning: false


#filtered_genes_and_paths_top50 %>%
#  inner_join(season_info, by = "Geneid") %>%
#  semi_join(cyc.genes.tres %>% filter(type == "sig"), by = "Geneid") %>%
#  distinct(Geneid, season) %>%
#  group_by(season) %>%
#  tally() %>%
#  ungroup() %>%
#  arrange(desc(n))


# SeasInfo is deprecated due to uncertainties in defining the peak by RAIN.
SeasInfo %>% 
  group_by(season) %>%
  tally() %>%
  ungroup() %>%
  arrange(desc(n)) %>%
  summarise(sum(n))

SeasInfo %>% 
  group_by(season) %>%
  tally() %>%
  ungroup() %>%
  arrange(desc(n)) 

season_info %>% 
  group_by(season) %>%
  tally() %>%
  ungroup() %>%
  arrange(desc(n)) %>%
  summarise(sum(n))

season_info %>% 
  group_by(season) %>%
  tally() %>%
  ungroup() %>%
  arrange(desc(n)) 
```

```{r}
## Tentative chunk looking at most abundant genes in each cluster
filtered_genes_and_paths_top50 %>%
  semi_join(cyc.genes.tres %>% filter(type == "sig"), by = "Geneid") %>%
  inner_join(season_info, by = "Geneid") %>%
  filter(Geneid %in% seasgenes) %>%
  mutate(season = case_when(season == "autumn" ~ "Autumn",
                            season == "summer" ~ "Summer",
                            season == "winter" ~ "Winter",
                            season == "spring" ~ "Spring",
                            TRUE ~ "No")) %>%
  mutate(season = factor(season, levels = c("Spring", "Summer","Autumn","Winter"))) %>%
  left_join(eggnog_table %>% distinct(Geneid, Predicted_protein_name, eggNOG_free_text_description), by = "Geneid") %>%
  ggplot(mapping = aes(x = dates, y = tpm, fill = Predicted_protein_name, group = Geneid)) +
  geom_line( ) +
  theme_bw() +
  #scale_fill_manual('COG category', values = scale25) +
  guides(fill = guide_legend(ncol=2, title.position = "top")) +
   theme(legend.title = element_text(size = 9, face = "bold"),
        legend.text = element_markdown(size = 9),
        legend.key.size = unit(0.3, 'cm'),
        axis.text = element_text(size = 9),
        #plot.margin = margin(t = 1, r = 1, b = 0, l = 1, "lines"),
        #plot.margin=unit(c(0.05,0.05,0.1,-0.48), "cm"),
        legend.position = "bottom",
        legend.margin=margin(0,0,0,0),
        legend.spacing.x = unit(0.01, 'cm'),
        strip.placement = "outside",
        strip.text = element_markdown(size = 9, colour = "black"),
        strip.background = element_blank()
   ) +
  scale_x_date(date_breaks = "2 months", date_labels = "%b",limits = as.Date(c('2016-03-01','2017-12-12'))) +
  facet_wrap(~ season) +
  xlab("Month") +
  ylab(bquote('Transcripts per million (tpm x'~10^4~')')) 
```

### COG-summary of RAIN seasonal clusters

A COG-functional summary partitioned among the RAIN genes.

```{r}
#| label: fig-COG_catsRAIN
#| fig-cap: summarised tpm values of rain and non-rain genes across the different functional COG-categories.
#| fig-subcap: 
#|   - "RAIN-genes"
#|   - "non-RAIN-genes."
#| warning: false

scale25 <- c(
  "dodgerblue2", "#E31A1C", # red
  "green4",
  "#6A3D9A", # purple
  "#FF7F00", # orange
  "black", "gold1",
  "skyblue2", "#FB9A99", # lt pink
  "palegreen2",
  "#CAB2D6", # lt purple
  "#FDBF6F", # lt orange
  "gray70", "khaki2",
  "maroon", "orchid1", "deeppink1", "blue1", "steelblue4",
  "darkturquoise", "green1", "yellow4", "yellow3",
  "darkorange4", "brown"
)

filtered_genes_and_paths_top50 %>%
  semi_join(cyc.genes.tres %>% filter(type == "sig"), by = "Geneid") %>%
  inner_join(season_info, by = "Geneid") %>%
  inner_join(eggnog_table %>%
               distinct(Geneid, COG_Functional_Category,
                        by = "Geneid")) %>%
  separate_rows(COG_Functional_Category, sep = "(?<=.)(?=.)") %>%
  filter(!is.na(COG_Functional_Category)) %>%
  group_by(dates, COG_Functional_Category, season) %>%
  summarise(tpm = sum(tpm)) %>%
  ungroup() %>%
   inner_join(COG_cats, by = "COG_Functional_Category") %>%
  mutate(season = case_when(season == "autumn" ~ "Autumn",
                            season == "summer" ~ "Summer",
                            season == "winter" ~ "Winter",
                            season == "spring" ~ "Spring",
                            TRUE ~ "No")) %>%
  mutate(season = factor(season, levels = c("Spring", "Summer","Autumn","Winter"))) %>%
  ggplot(mapping = aes(x = dates, y = tpm/100000, fill = full_name)) +
  geom_area( ) +
  theme_bw() +
  scale_fill_manual('COG category', values = scale25) +
  guides(fill = guide_legend(ncol=2, title.position = "top")) +
  scale_x_date(date_breaks = "2 months", date_labels = "%b",limits = as.Date(c('2016-03-01','2017-12-12'))) +
  facet_grid(rows = vars(season), space = "free_y", scales = "free") +
  theme(legend.title = element_text(size = 9, face = "bold"),
        legend.text = element_markdown(size = 9),
        legend.key.size = unit(0.3, 'cm'),
        axis.text = element_text(size = 9),
        #plot.margin = margin(t = 1, r = 1, b = 0, l = 1, "lines"),
        #plot.margin=unit(c(0.05,0.05,0.1,-0.48), "cm"),
        legend.position = "bottom",
        legend.margin=margin(0,0,0,0),
        legend.spacing.x = unit(0.01, 'cm'),
        strip.placement = "outside",
        strip.text.y = element_markdown(size = 9, colour = "black", angle = 0),
        strip.background = element_blank()
   ) +
  xlab("Month") +
  ylab(bquote('Transcripts per million (tpm x'~10^5~')')) +
  scale_y_continuous(breaks=c(0,0.5,1,2,3,4))

p2 <- ggplot2::last_plot()

ggsave("../results/season_overview090.png")
ggsave("../results/season_overview090.pdf")

```

```{r}
#Combining PCA and RAIN-plot

layout <- c('
AAACCC
BBBCCC
BBBCCC
')
  
  plotExpr + 
  p1  + 
  p2  + 
  plot_layout(design = layout, heights = unit(c(5,5), "cm")) 
   # theme(axis.title = element_text(size = 9))

#& theme( 
                       #                             legend.key.size = unit(0.4, 'cm'),
                       #                             legend.title = element_text(size=8)) 

ggsave("../results/PCA_metaT_COG090.png", width = 34, height = 24, units = "cm")
ggsave("../results/PCA_metaT_COG090.pdf", width = 34, height = 24, units = "cm")
```

## Identifying initeresting genes in the winter cluster

```{r}
Seasonal_infos <-  filtered_genes_and_paths_top50 %>%
  semi_join(cyc.genes.tres %>% filter(type == "sig"), by = "Geneid") %>%
  inner_join(season_info, by = "Geneid") %>%
  inner_join(eggnog_table %>%
               distinct(Geneid, COG_Functional_Category, Predicted_protein_name,eggNOG_free_text_description ),
                        by = "Geneid") %>%
 # separate_rows(COG_Functional_Category, sep = "(?<=.)(?=.)") %>%
 # filter(!is.na(COG_Functional_Category)) %>%
  #group_by(dates, COG_Functional_Category, season) %>%
  #summarise(tpm = sum(tpm)) %>%
  #ungroup() %>%
   #inner_join(COG_cats, by = "COG_Functional_Category") %>%
  mutate(season = case_when(season == "autumn" ~ "Autumn",
                            season == "summer" ~ "Summer",
                            season == "winter" ~ "Winter",
                            season == "spring" ~ "Spring",
                            TRUE ~ "No")) %>%
  mutate(season = factor(season, levels = c("Spring", "Summer","Autumn","Winter"))) %>%
  distinct(Geneid, Predicted_protein_name,COG_Functional_Category, season, eggNOG_free_text_description) 
```

## KEGG-level2 overview (deprecated)

```{r}
#| label: pathway level 2 summary vectors
#Summarising the larger KEGG categories accordign to their structure in https://www.genome.jp/kegg/pathway.html I did leave out the 1.0 category global and overview maps, as it is so wide, and obscures the rest of the patterns due to high tpm values of uninformative processes

Global_and_overview_maps <- c("01100","01110","01120","01200","01210","01212","01230","01232","01250","01240","01220")

Carbohydrate_metabolism <- c("00010","00020","00030","00040","00051","00052","00053","00500","00520","00620","00630","00640","00650","00660","00562")

Energy_metabolism <- c("00190","00195","00196","00710","00720","00680","00910","00920")

Lipid_metabolism <- c("00061","00062","00071","00072","00073","00100","00120","00121","00140","00561","00564","00565","00600","00590","00591","00592","01040")

Nucleotide_metabolism <- c("00230", "00240") 

Amino_acid_metabolism<- c("00250","00260","00270","00280","00290","00300","00310","00220","00330","00340","00350","00360","00380","00400")

Metabolism_of_other_amino_acids<- c("00410","00430","00440","00450","00460","00471","00472","00473","00480")

Glycan_biosynthesis_and_metabolism <- c("00510","00513","00512","00515","00514","00532","00534","00533","00531","00563","00601","00603","00604","00540","00541","00550","00511","00571","00572")

Metabolism_of_cofactors_and_vitamins<- c("00730","00740","00750","00760","00770","00780","00785","00790","00670","00830","00860","00130")

Metabolism_of_terpenoids_and_polyketides<- c("00900","00902","00909","00904","00906","00905","00981","00908","00903","00281","01052","00522","01051","01059","01056","01057","00253","00523","01054","01053","01055")

Biosynthesis_of_other_secondary_metabolites <- c("00940","00945","00941","00944","00942","00943","00901","00403","00950","00960","01058","00232","00965","00966","00402","00311","00332","00261","00331","00521","00524","00525","00401","00404","00405","00333","00254","00999","00998","00997")

Xenobiotics_biodegradation_and_metabolism <- c("00362","00627","00364","00625","00361","00623","00622","00633","00642","00643","00791","00930","00363","00621","00626","00624","00365","00984","00980","00982","00983")

Chemical_structure_transformation_maps <- c("01010","01060","01061","01062","01063","01064","01065","01066","01070")

Transcription <- 
  c("03020","03022", "03040")

Translation <-
  c("03010","00970","03013","03015","03008")
 
Folding_sorting_and_degradation <-
  c("03060","04141","04130","04120","04122","03050","03018")

Replication_and_repair <- 
  c("03030","03410","03420","03430","03440","03450","03460")

 #This category is removed from the categorie-vector due to no hits at all among the DE-genes
Information_processing_in_viruses <-
   c("03230","03240","03250","03260","03262","03261","03263","03264","03265","03266","03268","03267")
 
 Membrane_transport <-
   c("02010","02060","03070")
 
 Signal_transduction <- 
   c("02020","04010","04013","04016","04011","04012","04014","04015","04310","04330","04340","04341","04350", "04390","04391","04392","04370","04371","04630","04064","04668","04066","04068","04020","04070","04072","04071","04024","04022","04151","04152","04150","04075")
 
 Cellular_community_prokaryotes <-
   c("02024","05111","02025","02026")
 
 Cell_motility <-
   c("02030","02040","04814","04810")
 

categories <- c("Carbohydrate_metabolism", "Energy_metabolism", "Lipid_metabolism", "Nucleotide_metabolism", "Amino_acid_metabolism", "Metabolism_of_other_amino_acids", "Glycan_biosynthesis_and_metabolism", "Metabolism_of_cofactors_and_vitamins", "Metabolism_of_terpenoids_and_polyketides", "Biosynthesis_of_other_secondary_metabolites", "Xenobiotics_biodegradation_and_metabolism", "Chemical_structure_transformation_maps", "Transcription","Translation","Folding_sorting_and_degradation","Replication_and_repair", "Membrane_transport","Signal_transduction","Cellular_community_prokaryotes","Cell_motility")
```

```{r}
#Adding the larger level information
orf_KEGG2_key <- eggnog_table %>%
  separate_rows(KEGG_Pathway, sep = ",") %>%
  mutate(KEGG_Pathway = gsub("^[a-z]*", "", KEGG_Pathway)) %>%
  distinct(Geneid, KEGG_Pathway) %>%
  mutate(KEGG_level_2 = case_when(
    #KEGG_Pathway %in% Global_and_overview_maps ~ "Global_and_overview_maps",
    KEGG_Pathway %in% Carbohydrate_metabolism ~ "Carbohydrate metabolism",
    KEGG_Pathway %in% Energy_metabolism ~ "Energy metabolism",
    KEGG_Pathway %in% Lipid_metabolism ~ "Lipid metabolism",
    KEGG_Pathway %in% Nucleotide_metabolism ~ "Nucleotide metabolism",
    KEGG_Pathway %in% Amino_acid_metabolism ~ "Amino acid metabolism",
    KEGG_Pathway %in% Metabolism_of_other_amino_acids ~ "Metabolism of other amino acids",
    KEGG_Pathway %in% Glycan_biosynthesis_and_metabolism ~ "Glycan biosynthesis and metabolism",
    KEGG_Pathway %in% Metabolism_of_cofactors_and_vitamins ~ "Metabolism of cofactors and vitamins",
    KEGG_Pathway %in% Metabolism_of_terpenoids_and_polyketides ~ "Metabolism of terpenoids and polyketides",
    KEGG_Pathway %in% Biosynthesis_of_other_secondary_metabolites ~ "Biosynthesis of other secondary metabolites",
    KEGG_Pathway %in% Xenobiotics_biodegradation_and_metabolism ~ "Xenobiotics biodegradation and metabolism",
    KEGG_Pathway %in% Chemical_structure_transformation_maps ~ "Chemical structure transformation maps",
    KEGG_Pathway %in% Transcription ~ "Transcription",
    KEGG_Pathway %in% Translation ~ "Translation",
    KEGG_Pathway %in% Folding_sorting_and_degradation ~ "Folding sorting and degradation",
    KEGG_Pathway %in% Replication_and_repair ~ "Replication and repair",
    KEGG_Pathway %in% Information_processing_in_viruses ~ "Information processing in viruses",
    KEGG_Pathway %in% Membrane_transport ~ "Membrane transport",
    KEGG_Pathway %in% Signal_transduction ~ "Signal transduction", #Not adding a last line here gives all PW's not present NA's.
    KEGG_Pathway %in% Cellular_community_prokaryotes ~ "Cellular community prokaryotes",
    KEGG_Pathway %in% Cell_motility ~ "Cell motility"
  ))
```

```{r}
#Kegg-level-2

filtered_genes_and_paths_top50 %>%
  semi_join(cyc.genes.tres %>% filter(type == "non-sig"), by = "Geneid") %>%
  inner_join(season_info, by = "Geneid") %>%
  inner_join(orf_KEGG2_key %>% distinct(Geneid, KEGG_level_2), by = "Geneid") %>%
  group_by(dates, KEGG_level_2, season) %>%
  summarise(tpm = sum(tpm)) %>%
  ungroup() %>%
  mutate(season = case_when(season == "autumn" ~ "Autumn",
                            season == "summer" ~ "Summer",
                            season == "winter" ~ "Winter",
                            season == "spring" ~ "Spring",
                            TRUE ~ "No")) %>%
  mutate(season = factor(season, levels = c("Spring", "Summer","Autumn","Winter"))) %>%
  ggplot(mapping = aes(x = dates, y = tpm, fill = KEGG_level_2)) +
  geom_area( ) +
  theme_bw() +
  scale_fill_manual('KEGG level2', values = scale25) +
  guides(fill = guide_legend(ncol=2, title.position = "top")) +
   theme(legend.title = element_text(size = 9, face = "bold"),
        legend.text = element_markdown(size = 9),
        legend.key.size = unit(0.3, 'cm'),
        axis.text = element_text(size = 9),
        #plot.margin = margin(t = 1, r = 1, b = 0, l = 1, "lines"),
        #plot.margin=unit(c(0.05,0.05,0.1,-0.48), "cm"),
        legend.position = "bottom",
        legend.margin=margin(0,0,0,0),
        legend.spacing.x = unit(0.01, 'cm'),
        strip.placement = "outside",
        strip.text = element_markdown(size = 9, colour = "black"),
        strip.background = element_blank()
   ) +
  scale_x_date(date_breaks = "2 months", date_labels = "%b",limits = as.Date(c('2016-03-01','2017-12-12'))) +
  facet_wrap(~ season) +
  xlab("Month") 
  #ylab(bquote('Transcripts per million (tpm x'~10^4~')')) 

ggsave("../results/KEGG_level_2090.pdf")
ggsave("../results/KEGG_level_2090.png")
```

## Identify metabolism genes of interest and place them in the respective clusters.

```{r}
#| label: geneVecs
#| warning: false

#photosystem genes" -" PSI and PS22, look at the modules, as seen by Evangelia" "Genes of interest: PS2 Psb[A-F], PS1 psa[A-O], psaX"
 PS2 <- c("psbA", "psbB", "psbC", "psbD","psbE", "psbF")
 PS1 <- c("psaA", "psaB","psaC","psaD","psaE","psaF", "psaG", "psaH","psaI","psaJ","psaK","psaL","psaM","psaN","psaO", "psaX")
 Antenna_proteins <- c("apcA","apcB", "cpcA", "cpcB", "cpeA","cpeB", "cpeC" , "cpeD", "cpeE", "cpeR", "cpeS", "cpeT", "cpeU", "cpeY", "cpeZ")
 
n_fixation <- c("nifH","nifD") # (The two usually expressed genes, nifH probably only relevant)
NitMet <- c("nifH","nifD","amtB","urtA")
c_fixation <- c("rbcL", "cbbL", "cbbM") #(From KEGG pathway, and oown knowledge) "RubisCo""M00165". 
sunscreen_genes <-  c("scyA","scyB","scyC","scyD","scyE") #scyD is not part of core cassette. (Pichel et al. 2019)
#"ribosomal genes" - "" # Did not find any sunscreen genes
Phosphorus_scav_genes <- c("pstS", "pstC", "pstA", "pstB", "phnE","phnC","phoH")


# From Ehira and Miyazaki 2015. See refs therein for origin of genes.
  HeteroDiffGenes <- c("ntcA", "hetR")
  SigFac  <- c("sigC", "sigE","sigG") #Sigmafactors related to differentitation triggered by N-starvation

# From √ñsterholm et al. 2020 TS2
  GasVesgenes <- c("gvpW", "gvpV" ,"gvpG","gvpF","gvpK","gvpJ","gvpN","gvpC","gvpA")
  #toxin genes" - ""
     Microcystin <- c("mcyH", "mcyI", "mcyF", "mcyE", "mcyJ", "mcyD", "mcyG", "mcyA", "mcyB", "mcyC")
     Anabaenopeptilide <- c("apdG","apdF","apdE","apdD","apdB", "apdA") #apdBA are pseudogenes
     Anabaenopeptin <- c("aptE", "aphA","aptD","aptC","aptB","aptA2","aptA1")
     Anabaenolysin <- c("camA", "ablA", "ablB", "ablC", "ablD", "ablE")
     Anacyclamide <- c("acyC", "acyB","acyA","acyE","acyF","acyG")
     Anatoxin_a <- c("anaB", "anaC", "anaD", "anaE", "anaF", "anaG", "anaA")
     Hassallidin <- c("hasZ", "hasY", "hasX" ,"hasW" ,"hasV" ,"hasU" ,"hasT" ,"hasS" ,"hasR" ,"hasQ" ,"hasP" ,"hasO" ,"hasN" ,"hasM" ,"hasL" ,"hasK" ,"hasJ" ,"hasI" ,"hasH" ,"hasG" ,"hasF" ,"hasE" ,"hasD" ,"hasC" ,"hasB" ,"hasA")
     Aeruginosin <- c("aerD", "aerE","aerF","aerG1","aerG2","aerA","aerB")  #AerD and AerG1 are pseudogenes
     Anabaenopeptin_Pseudospumigin_Microviridin <- c("spuF", "spuB", "spuA", "hphB", "hphCD", "aptA", "aptB", "aptC", "aptD", "hphA", "aptE", "mvdA", "mvdB", "mvdC", "mvdE")
     Geosmin <- c("cnb1","cnb2" , "geoA")

# From Mihali et al. 2008
  CylindrospermopsinGenes <- c("aoaA","aoaB","aoaC","cyrJ", "cyrA", "cyrB","cyrC", "cyrD", "cyrE", "cyrF", "cyrG", "cyrH", "cyrI", "cyrJ", "cyrK", "cyrL", "cyrM", "cyrN", "cyrO")
  
  Circadian <- c("kaiC","kaiB","kaiA") #From what article??
  
  #From own data
CobGenes <- c("cbiA", "cbiD","cobI","cobJ","cobK","cbiM","cobO","cbiQ","cbiT","cobQ","cobT","cobW","cbiX")

FolGenes <- c("folA","folB","folC","folD","folE","folK","folP")


OxiStress <- c("gshA","gshB","rbr","dnaJ","dnaJ3","grpE","sodB", "fur")

#Sulfur genes

Sulf <- c("sufB","sufS")
  
  #List of genes of interest, also see Ericks list of interesting genes.
VecOfvecs1 <- c(PS2, PS1, Antenna_proteins, NitMet, c_fixation, sunscreen_genes, Phosphorus_scav_genes, HeteroDiffGenes, SigFac, GasVesgenes,Microcystin, Anabaenopeptilide, Anabaenopeptin, Anabaenolysin, Anacyclamide, Anatoxin_a, Hassallidin, Aeruginosin, Anabaenopeptin_Pseudospumigin_Microviridin, Geosmin, CylindrospermopsinGenes, Circadian, CobGenes, FolGenes, OxiStress, Sulf)

VecOfvecs2 <- c("PS2", "PS1", "Antenna_proteins", "NitMet", "c_fixation", "sunscreen_genes", "Phosphorus_scav_genes", "HeteroDiffGenes", "SigFac", "GasVesgenes", "Microcystin", "Anabaenopeptilide", "Anabaenopeptin", "Anabaenolysin", "Anacyclamide", "Anatoxin_a", "Hassallidin", "Aeruginosin", "Anabaenopeptin_Pseudospumigin_Microviridin", "Geosmin", "CylindrospermopsinGenes","Circadian","CobGenes","FolGenes","OxiStress", "Sulf")
```

```{r}
#| label: fig-EcoGenesSeasonOptima
#| fig-cap: "Seasonal fidelity of ecologically relevant genes"
#| warning: false

SeaEcoGen <- filtered_genes_and_paths_top50 %>%
  mutate(type = ifelse(
    Geneid %in% c(
      cyc.genes.tres %>% filter(type == "sig") %>% distinct(Geneid) %>% pull(Geneid)
      ), paste0("sig"), paste0("non-sig")
    )) %>%
  left_join(eggnog_table %>% distinct(Predicted_protein_name, Geneid), by = "Geneid") %>%
  filter(!is.na(Predicted_protein_name) & type == "sig") %>%
  inner_join(season_info, by = "Geneid") %>%
  distinct(Geneid, season, Predicted_protein_name) %>%
  filter(Predicted_protein_name %in% VecOfvecs1) %>%
  mutate(Cats = case_when(Predicted_protein_name %in% PS2 ~ paste0(VecOfvecs2[1]),
                          Predicted_protein_name %in% PS1 ~ paste0(VecOfvecs2[2]),
                          Predicted_protein_name %in% Antenna_proteins ~ paste0(VecOfvecs2[3]),
                          Predicted_protein_name %in% NitMet ~ paste0(VecOfvecs2[4]),
                          Predicted_protein_name %in% c_fixation ~ paste0(VecOfvecs2[5]),
                          Predicted_protein_name %in% sunscreen_genes ~ paste0(VecOfvecs2[6]),
                          Predicted_protein_name %in% Phosphorus_scav_genes ~ paste0(VecOfvecs2[7]),
                          Predicted_protein_name %in% HeteroDiffGenes ~ paste0(VecOfvecs2[8]),
                         # Predicted_protein_name %in% SigFac ~ paste0(VecOfvecs2[9]),
                          Predicted_protein_name %in% GasVesgenes ~ paste0(VecOfvecs2[10]),
                          Predicted_protein_name %in% Microcystin ~ paste0(VecOfvecs2[11]),
                          Predicted_protein_name %in% Anabaenopeptilide ~ paste0(VecOfvecs2[12]),
                          Predicted_protein_name %in% Anabaenopeptin ~ paste0(VecOfvecs2[13]),
                          Predicted_protein_name %in% Anabaenolysin ~ paste0(VecOfvecs2[14]),
                          Predicted_protein_name %in% Anacyclamide ~ paste0(VecOfvecs2[15]),
                          Predicted_protein_name %in% Anatoxin_a ~ paste0(VecOfvecs2[16]),
                          Predicted_protein_name %in% Hassallidin ~ paste0(VecOfvecs2[17]),
                          Predicted_protein_name %in% Aeruginosin ~ paste0(VecOfvecs2[18]),
                          Predicted_protein_name %in% Anabaenopeptin_Pseudospumigin_Microviridin ~ paste0(VecOfvecs2[19]),
                          Predicted_protein_name %in% Geosmin ~ paste0(VecOfvecs2[20]),
                          Predicted_protein_name %in% CylindrospermopsinGenes ~ paste0(VecOfvecs2[21]),
                          Predicted_protein_name %in% Circadian ~ paste0(VecOfvecs2[22]),
                          Predicted_protein_name %in% CobGenes ~ paste0(VecOfvecs2[23]),
                          Predicted_protein_name %in% FolGenes ~ paste0(VecOfvecs2[24]),
                          Predicted_protein_name %in% OxiStress ~ paste0(VecOfvecs2[25]),
                          Predicted_protein_name %in% Sulf ~ paste0(VecOfvecs2[26]),
                          TRUE ~ "Other")) %>%
  distinct(Predicted_protein_name,Cats, season)
```

Genes of interest, representing litestyle-choiced and ecological strategies of aphanizomenon were selected based on literature, and included photosystem genes, antenna-proteins, heterocyst differentiation genes and their sigma factors, N and C fixation genes, gas vesicle genes, P-scavenging genes @fig-GenevecPlot. Toxin genes were included in the search but not found. The heterocyst genes appear to be expressed before the N-fixation gene top expression.

```{r fig.width=18, fig.height=12}
#| label: fig-GenevecPlot
#| fig-cap: "The expression patterns of genes in ecologically relevant functions."
#| warning: false
#Plotting the gene expression of genevectors

#How to do it: Mutate in larger categories, mutate in an asterisk if gene is cyclical. Facet wrap on the larger categories
 #mutate(trial = case_when(grepl("map02010", pathway) ~ "map02010",
                        #   grepl("00430", pathway) ~ "00430",
                        #   TRUE ~ "other")) %>%

#Creating a reasonable colour palette for this misery

pathway_colour_palette <- c(
    "Antenna_proteins.*apcA*" = "#A6CEE3",
    "Antenna_proteins.*apcB*" = "#1F78B4",
    "Antenna_proteins.*cpcA*" = "#B2DF8A",
    "Antenna_proteins.*cpcB*" = "#33A02C",
    "c_fixation.*cbbL*" = "#A6CEE3",
    "HeteroDiffGenes.*hetR*" = "#A6CEE3",
    "HeteroDiffGenes.*ntcA*" = "#1F78B4",
    "n_fixation.*nifD*" = "#A6CEE3",
    "n_fixation.*nifH*" = "#1F78B4",
    "GasVesgenes.*gvpC*" = "#A6CEE3",
    "GasVesgenes.*gvpF"= "#1F78B4",
    "GasVesgenes.*gvpG*" = "#CAB2D6",
    "GasVesgenes.*gvpJ*" = "#6A3D9A",
    "GasVesgenes.*gvpK*" ="#B15928",
    "GasVesgenes.*gvpN*" = "#FB9A99",
    "GasVesgenes.*gvpW*" = "#B2DF8A",
    "Phosphorus_scav_genes.*pstA*" = "#A6CEE3",
    "Phosphorus_scav_genes.*pstB*" = "#1F78B4",
    "Phosphorus_scav_genes.*pstC*" = "#B2DF8A",
    "Phosphorus_scav_genes.*pstS*" = "#33A02C",
    "PS1.*psaA*" = "#A6CEE3",
    "PS1.*psaB*" = "#1F78B4",
    "PS1.*psaC*" = "#CAB2D6",
    "PS1.*psaD*" = "#6A3D9A",
    "PS1.*psaE*" = "#FFFF99",
    "PS1.*psaF*" = "#B15928",
    "PS1.*psaI*" = "#FB9A99",
    "PS1.*psaJ*" = "#33A02C",
    "PS1.*psaK*" = "#E31A1C",
    "PS1.*psaL*" = "#FDBF6F",
    "PS1.*psaX*" = "#B2DF8A",
    "PS2.*psbB*" = "#A6CEE3",
    "PS2.*psbC*" = "#1F78B4",
    "PS2.*psbD*" = "#B2DF8A",
    "PS2.*psbE*" = "#33A02C",
    "PS2.*psbF*" = "#FB9A99",
    "SigFac.*sigC*" = "#A6CEE3",
    "SigFac.*sigE*" = "#1F78B4",
    "SigFac.*sigG*" = "#B2DF8A",
    "Circadian.*kaiC*" = "#A6CEE3",
    "Circadian.*kaiB*" = "#1F78B4",
    "Circadian.*kaiA*" = "#B2DF8A",
    "CobGenes.*cbiA*" ="#A6CEE3",
    "CobGenes.*cbiD*" ="#1F78B4",
    "CobGenes.*cbiM*" ="#B2DF8A",
    "CobGenes.*cbiQ*" ="#33A02C",
    "CobGenes.*cbiT*" ="#FB9A99",
    "CobGenes.*cbiX*" ="#E31A1C",
    "CobGenes.*cobI*" ="#FDBF6F",
    "CobGenes.*cobJ*"="#FF7F00",
    "CobGenes.*cobO*" ="#CAB2D6",
    "CobGenes.*cobQ*" ="#6A3D9A",
    "CobGenes.*cobT*" ="#FFFF99",
    "CobGenes.*cobW*" ="#B15928",
    "FolGenes.*folA*" ="#A6CEE3",
    "FolGenes.*folB*" ="#1F78B4",
    "FolGenes.*folC*" ="#B2DF8A",
    "FolGenes.*folD*" ="#33A02C",
    "FolGenes.*folE*" ="#FB9A99",
    "FolGenes.*folK*" ="#E31A1C",
    "FolGenes.*FolP*" = "#FDBF6F",
    "GlutaGenes.*gshA*" = "#A6CEE3",
    "GlutaGenes.*gshB*" = "#1F78B4"
    
    
)


#Getting significant info to mutate in on the predicted names in chunk below

SigInfo <- filtered_genes_and_paths_top50 %>%
  mutate(type = ifelse(
    Geneid %in% c(
      cyc.genes.tres %>% filter(type == "sig") %>% distinct(Geneid) %>% pull(Geneid)
      ), paste0("sig"), paste0("non-sig")
    )) %>%
  left_join(eggnog_table %>% distinct(Predicted_protein_name, Geneid), by = "Geneid") %>%
    mutate(Cats = case_when(Predicted_protein_name %in% PS2 ~ paste0(VecOfvecs2[1]),
                          Predicted_protein_name %in% PS1 ~ paste0(VecOfvecs2[2]),
                          Predicted_protein_name %in% Antenna_proteins ~ paste0(VecOfvecs2[3]),
                          Predicted_protein_name %in% NitMet ~ paste0(VecOfvecs2[4]),
                          Predicted_protein_name %in% c_fixation ~ paste0(VecOfvecs2[5]),
                          Predicted_protein_name %in% sunscreen_genes ~ paste0(VecOfvecs2[6]),
                          Predicted_protein_name %in% Phosphorus_scav_genes ~ paste0(VecOfvecs2[7]),
                          Predicted_protein_name %in% HeteroDiffGenes ~ paste0(VecOfvecs2[8]),
                          #Predicted_protein_name %in% SigFac ~ paste0(VecOfvecs2[9]),
                          Predicted_protein_name %in% GasVesgenes ~ paste0(VecOfvecs2[10]),
                          Predicted_protein_name %in% Microcystin ~ paste0(VecOfvecs2[11]),
                          Predicted_protein_name %in% Anabaenopeptilide ~ paste0(VecOfvecs2[12]),
                          Predicted_protein_name %in% Anabaenopeptin ~ paste0(VecOfvecs2[13]),
                          Predicted_protein_name %in% Anabaenolysin ~ paste0(VecOfvecs2[14]),
                          Predicted_protein_name %in% Anacyclamide ~ paste0(VecOfvecs2[15]),
                          Predicted_protein_name %in% Anatoxin_a ~ paste0(VecOfvecs2[16]),
                          Predicted_protein_name %in% Hassallidin ~ paste0(VecOfvecs2[17]),
                          Predicted_protein_name %in% Aeruginosin ~ paste0(VecOfvecs2[18]),
                          Predicted_protein_name %in% Anabaenopeptin_Pseudospumigin_Microviridin ~ paste0(VecOfvecs2[19]),
                          Predicted_protein_name %in% Geosmin ~ paste0(VecOfvecs2[20]),
                          Predicted_protein_name %in% CylindrospermopsinGenes ~ paste0(VecOfvecs2[21]),
                          Predicted_protein_name %in% Circadian ~ paste0(VecOfvecs2[22]),
                          Predicted_protein_name %in% CobGenes ~ paste0(VecOfvecs2[23]),
                          Predicted_protein_name %in% FolGenes ~ paste0(VecOfvecs2[24]),
                          Predicted_protein_name %in% OxiStress ~ paste0(VecOfvecs2[25]),
                          Predicted_protein_name %in% Sulf ~ paste0(VecOfvecs2[26]),
                          TRUE ~ "Other")) %>%
    filter(Cats != "Other") %>%
   distinct(Predicted_protein_name, type) %>%
  filter(type == "sig") %>%
  pull(Predicted_protein_name)
   

hmm <- filtered_genes_and_paths_top50 %>%
  group_by(Geneid, dates) %>%
  summarise(tpm = sum(tpm)) %>%
  ungroup() %>%
  left_join(eggnog_table %>% distinct(Predicted_protein_name, Geneid), by = "Geneid") %>%
  mutate(Cats = case_when(Predicted_protein_name %in% PS2 ~ paste0(VecOfvecs2[1]),
                          Predicted_protein_name %in% PS1 ~ paste0(VecOfvecs2[2]),
                          Predicted_protein_name %in% Antenna_proteins ~ paste0(VecOfvecs2[3]),
                          Predicted_protein_name %in% NitMet ~ paste0(VecOfvecs2[4]),
                          Predicted_protein_name %in% c_fixation ~ paste0(VecOfvecs2[5]),
                          Predicted_protein_name %in% sunscreen_genes ~ paste0(VecOfvecs2[6]),
                          Predicted_protein_name %in% Phosphorus_scav_genes ~ paste0(VecOfvecs2[7]),
                          Predicted_protein_name %in% HeteroDiffGenes ~ paste0(VecOfvecs2[8]),
                          #Predicted_protein_name %in% SigFac ~ paste0(VecOfvecs2[9]),
                          Predicted_protein_name %in% GasVesgenes ~ paste0(VecOfvecs2[10]),
                          Predicted_protein_name %in% Microcystin ~ paste0(VecOfvecs2[11]),
                          Predicted_protein_name %in% Anabaenopeptilide ~ paste0(VecOfvecs2[12]),
                          Predicted_protein_name %in% Anabaenopeptin ~ paste0(VecOfvecs2[13]),
                          Predicted_protein_name %in% Anabaenolysin ~ paste0(VecOfvecs2[14]),
                          Predicted_protein_name %in% Anacyclamide ~ paste0(VecOfvecs2[15]),
                          Predicted_protein_name %in% Anatoxin_a ~ paste0(VecOfvecs2[16]),
                          Predicted_protein_name %in% Hassallidin ~ paste0(VecOfvecs2[17]),
                          Predicted_protein_name %in% Aeruginosin ~ paste0(VecOfvecs2[18]),
                          Predicted_protein_name %in% Anabaenopeptin_Pseudospumigin_Microviridin ~ paste0(VecOfvecs2[19]),
                          Predicted_protein_name %in% Geosmin ~ paste0(VecOfvecs2[20]),
                          Predicted_protein_name %in% CylindrospermopsinGenes ~ paste0(VecOfvecs2[21]),
                          Predicted_protein_name %in% Circadian ~ paste0(VecOfvecs2[22]),
                          Predicted_protein_name %in% CobGenes ~ paste0(VecOfvecs2[23]),
                          Predicted_protein_name %in% FolGenes ~ paste0(VecOfvecs2[24]),
                          Predicted_protein_name %in% OxiStress ~ paste0(VecOfvecs2[25]),
                           Predicted_protein_name %in% Sulf ~ paste0(VecOfvecs2[26]),
                          TRUE ~ "Other")) %>%
  filter(Cats != "Other") %>%
   mutate(type = ifelse(Predicted_protein_name %in% SigInfo, paste0("Yes"), paste0("No"))) %>%
  mutate(Predicted_protein_name = ifelse(Predicted_protein_name %in% SigInfo, paste0("*",Predicted_protein_name,"*"), paste0(Predicted_protein_name))) %>%
  mutate(Group = paste(Cats, Predicted_protein_name, sep = ".")) %>%
  select(Geneid, dates, tpm) %>%
  pivot_wider(values_from = tpm, names_from = Geneid, values_fill  = 0) %>%
  pivot_longer(c(2:ncol(.)), names_to = "Geneid", values_to = "tpm")
```

## Alternative plotting with only gene names in individual plots

```{r}
trial <- hmm %>%
  group_by(Geneid, dates) %>%
  summarise(tpm = sum(tpm)) %>%
  ungroup() %>%
  left_join(eggnog_table %>% distinct(Predicted_protein_name, Geneid), by = "Geneid") %>%
  mutate(Cats = case_when(Predicted_protein_name %in% PS2 ~ paste0(VecOfvecs2[1]),
                          Predicted_protein_name %in% PS1 ~ paste0(VecOfvecs2[2]),
                          Predicted_protein_name %in% Antenna_proteins ~ paste0(VecOfvecs2[3]),
                          Predicted_protein_name %in% NitMet ~ paste0(VecOfvecs2[4]),
                          Predicted_protein_name %in% c_fixation ~ paste0(VecOfvecs2[5]),
                          Predicted_protein_name %in% sunscreen_genes ~ paste0(VecOfvecs2[6]),
                          Predicted_protein_name %in% Phosphorus_scav_genes ~ paste0(VecOfvecs2[7]),
                          Predicted_protein_name %in% HeteroDiffGenes ~ paste0(VecOfvecs2[8]),
                          #Predicted_protein_name %in% SigFac ~ paste0(VecOfvecs2[9]),
                          Predicted_protein_name %in% GasVesgenes ~ paste0(VecOfvecs2[10]),
                          Predicted_protein_name %in% Microcystin ~ paste0(VecOfvecs2[11]),
                          Predicted_protein_name %in% Anabaenopeptilide ~ paste0(VecOfvecs2[12]),
                          Predicted_protein_name %in% Anabaenopeptin ~ paste0(VecOfvecs2[13]),
                          Predicted_protein_name %in% Anabaenolysin ~ paste0(VecOfvecs2[14]),
                          Predicted_protein_name %in% Anacyclamide ~ paste0(VecOfvecs2[15]),
                          Predicted_protein_name %in% Anatoxin_a ~ paste0(VecOfvecs2[16]),
                          Predicted_protein_name %in% Hassallidin ~ paste0(VecOfvecs2[17]),
                          Predicted_protein_name %in% Aeruginosin ~ paste0(VecOfvecs2[18]),
                          Predicted_protein_name %in% Anabaenopeptin_Pseudospumigin_Microviridin ~ paste0(VecOfvecs2[19]),
                          Predicted_protein_name %in% Geosmin ~ paste0(VecOfvecs2[20]),
                          Predicted_protein_name %in% CylindrospermopsinGenes ~ paste0(VecOfvecs2[21]),
                          Predicted_protein_name %in% Circadian ~ paste0(VecOfvecs2[22]),
                          Predicted_protein_name %in% CobGenes ~ paste0(VecOfvecs2[23]),
                          Predicted_protein_name %in% FolGenes ~ paste0(VecOfvecs2[24]),
                          Predicted_protein_name %in% OxiStress ~ paste0(VecOfvecs2[25]),
                           Predicted_protein_name %in% Sulf ~ paste0(VecOfvecs2[26]),
                          TRUE ~ "Other")) %>%
  filter(Cats != "Other") %>%
   mutate(type = ifelse(
    Geneid %in% c(cyc.genes.tres %>% filter(type == "sig") %>% distinct(Geneid) %>% pull(Geneid)
      ), paste0("sig"), paste0("non-sig")
    )) %>%
  filter(type == "sig" | Predicted_protein_name %in% c("hetR")) %>%
  mutate(Predicted_protein_name = paste0("*",Predicted_protein_name,"*")) %>%
  mutate(Group = paste0("*",Cats,"*"))  %>%
  mutate(presentable_names = case_when(Cats == "Antenna_proteins" ~ "Antenna proteins",
                                       Cats == "CobGenes" ~ "Cobalamin metabolism",
                                       Cats == "OxiStress" ~ "Oxidative stress",
                                       Cats == "NitMet" ~ "Nitrogen metabolism",
                                       Cats == "PS1" ~ "Photosystem I",
                                       Cats == "PS2" ~ "Photosystem II",
                                       Cats == "FolGenes" ~ "Folate genes",
                                       Cats == "HeteroDiffGenes" ~ "Heterocyst differentiation",
                                       Cats == "GasVesgenes" ~ "Gas vesicles",
                                       Cats == "c_fixation" ~ "Carbon fixation",
                                       Cats == "Circadian" ~ "Circadian rhythm",
                                       Cats == "Phosphorus_scav_genes" ~ "Phosphate transport",
                                       Cats == "Sulf" ~ "Iron-Sulfur biosynthesis",
                                       TRUE~ paste0(Cats)
                                       )) %>%
  mutate(presentable_names = factor(presentable_names, levels = c("Antenna proteins",
                                                                  "Carbon fixation",
                                                                  "Nitrogen metabolism",
                                                                  "Photosystem I",
                                                                  "Photosystem II",
                                                                  "Heterocyst differentiation",
                                                                  "Phosphate transport",
                                                                  "Oxidative stress",
                                                                  "Cobalamin metabolism",
                                                                  "Circadian rhythm",
                                                                  "Gas vesicles",
                                                                  #"Folate genes",
                                                                  "Iron-Sulfur biosynthesis"
                                                                  
                                                                  
                                                                  )))
```

#### Calculating summarised apcAB and cpcAB expression

```{r}
trial %>%
  mutate(pigments = case_when(grepl("apcA|apcB", Predicted_protein_name) ~ "apc",
                         grepl("cpcA|cpcB",Predicted_protein_name) ~ "cpc",
                         TRUE ~ "Other"
                         )
  ) %>% 
  group_by(pigments, dates) %>%
  summarise(tpm = sum(tpm)) %>%
  ungroup() %>%
  group_by(pigments) %>%
  filter(tpm == max(tpm)) %>%
  ungroup()
```

#### Identifying max cbbL and nifH expression

```{r}
trial %>% 
  filter(Predicted_protein_name == "*cbbL*") %>%
  group_by(Predicted_protein_name, dates) %>%
  summarise(tpm = sum(tpm)) %>%
  ungroup() %>%
  arrange(desc(tpm))

trial %>% 
  filter(Predicted_protein_name == "*nifH*") %>%
  group_by(Geneid,Predicted_protein_name, dates) %>%
  summarise(tpm = sum(tpm)) %>%
  ungroup() %>%
  arrange(desc(tpm))
```

```{r}

trial1 <- trial 

#  mutate(Predicted_protein_name = as.factor(Predicted_protein_name)) %>%
  # filter(!Predicted_protein_name %in% c("*psbB*","*psbD*","*psbE*")) 
  

scientific <- function(x){
    ifelse(x==0, "0", parse(text=gsub("[+]", "", gsub("e", "%*%10^", scientific_format()(x)))))
}

out <- by(data = trial1, INDICES = trial1$presentable_names, FUN = function(m) {
      m <- droplevels(m)
      m <- ggplot(m, aes(dates, tpm, group=Geneid, colour = Predicted_protein_name)) + 
       geom_line(aes()) +
        theme_classic() +
        theme(
        axis.title.x = element_blank(),
        axis.text.x = element_text(size =7, hjust = 1, angle = 60, colour = "black"),
        axis.text.y = element_text(size = 7, colour = "black"),
        legend.title = element_blank(),
        legend.text = element_markdown(size = 7),
        legend.key.size = unit(0.3, 'cm'),
        #plot.margin = margin(t = 1, r = 1, b = 0, l = 1, "lines"),
        plot.margin=unit(c(0.05,0.05,0.1,-0.46), "cm"),
        legend.position = "bottom",
        legend.box.spacing = unit(0, "pt"),
        legend.margin=margin(0,0,0,0),
        legend.spacing.x = unit(0.01, 'cm'),
        strip.placement = "outside",
        strip.text = element_markdown(size = 7, colour = "black"),
        strip.background = element_blank()
        #legend.box.margin=margin(10,10,10,10)
    )  +
        scale_colour_manual('Group', values = GEOM_COL_COLOURS, drop = F) +
        scale_x_date(date_breaks = "2 months", date_labels = "%b",limits = as.Date(c('2016-03-01','2017-12-12'))) +
        scale_linetype_manual('Seasonal', values = c(1,2), guide = "none", drop = F) +
       scale_y_continuous(label=scientific) +
        ylab("") +
        facet_wrap(~ presentable_names) +
  annotate("rect",
    xmin = as.Date.character("2016-03-01"),
    xmax = as.Date.character("2016-06-01"),
    ymin = -Inf,
    ymax = Inf,
    alpha = .1,
    fill = SEASON_COLOURS["spring"]
    ) +
  annotate("rect",
    xmin = as.Date.character("2016-06-01"),
    xmax = as.Date.character("2016-09-01"),
    ymin = -Inf,
    ymax = Inf,
    alpha = .1,
    fill = SEASON_COLOURS["summer"]
    ) +
  annotate("rect",
    xmin = as.Date.character("2016-09-01"),
    xmax = as.Date.character("2016-12-01"),
    ymin = -Inf,
    ymax = Inf,
    alpha = .1,
    fill = SEASON_COLOURS["autumn"]
    ) +
  annotate("rect",
    xmin = as.Date.character("2016-12-01"),
    xmax = as.Date.character("2017-03-01"),
    ymin = -Inf,
    ymax = Inf,
    alpha = .1,
    fill = SEASON_COLOURS["winter"]
    ) +
  annotate("rect",
    xmin = as.Date.character("2017-03-01"),
    xmax = as.Date.character("2017-05-31"),
    ymin = -Inf,
    ymax = Inf,
    alpha = .15,
    fill = SEASON_COLOURS["spring"]
    ) +
  annotate("rect",
    xmin = as.Date.character("2017-06-01"),
    xmax = as.Date.character("2017-09-01"),
    ymin = -Inf,
    ymax = Inf,
    alpha = .1,
    fill = SEASON_COLOURS["summer"]
    ) +
  annotate("rect",
    xmin = as.Date.character("2017-09-01"),
    xmax = as.Date.character("2017-12-01"),
    ymin = -Inf,
    ymax = Inf,
    alpha = .1,
    fill = SEASON_COLOURS["autumn"]
    ) +
        annotate("rect",
    xmin = as.Date.character("2017-12-01"),
    xmax = as.Date.character("2017-12-12"),
    ymin = -Inf,
    ymax = Inf,
    alpha = .1,
    fill = SEASON_COLOURS["winter"]
    ) 
  
   })

# If you want to supply the parameters to grid.arrange
plotobj <- do.call(grid.arrange, c(out, ncol=3))

ggplot2::ggsave("../results/EcoGenesPS2a090Coloured.png", plotobj, height = 18, width = 18, units = "cm")


ggplot2::ggsave("../results/EcoGenesPS2a090.pdf", plotobj, height = 18, width = 18, units = "cm")
ggplot2::ggsave("../results/EcoGenesPS2a090.png", plotobj, height = 18, width = 18, units = "cm")
```

#Secondary plot for merging scales

```{r}
trial2 <- trial %>%
   filter(Predicted_protein_name %in% c("*psbB*","*psbD*","*psbE*"))

out <- by(data = trial2, INDICES = trial2$presentable_names, FUN = function(m) {
      m <- droplevels(m)
      m <- ggplot(m, aes(dates, tpm, group=Geneid, colour = Predicted_protein_name)) + 
       geom_line(aes()) +
        theme_classic() +
        theme(
        axis.title.x = element_blank(),
        #axis.text.x = element_text(size =7, hjust = 1, angle = 60, colour = "black"),
        axis.text.x = element_blank(),
        axis.text.y = element_text(size = 7, colour = "black"),
        #axis.text.y = element_blank(),
        axis.ticks = element_blank(),
        legend.title = element_blank(),
        #legend.text = element_markdown(size = 7),
        legend.text = element_blank(),
        legend.key.size = unit(0.3, 'cm'),
        #plot.margin = margin(t = 1, r = 1, b = 0, l = 1, "lines"),
        plot.margin=unit(c(0.0,0.0,0,0), "cm"),
        legend.position = "none",
        legend.box.spacing = unit(0, "pt"),
        legend.margin=margin(0,0,0,0),
        legend.spacing.x = unit(0.01, 'cm'),
        strip.placement = "outside",
       # strip.text = element_markdown(size = 7, colour = "black"),
       strip.text = element_blank(),
        strip.background = element_blank()
        #legend.box.margin=margin(10,10,10,10)
    )  +
        scale_colour_manual('Group', values = GEOM_COL_COLOURS[-1]) +
        scale_x_date(date_breaks = "2 months", date_labels = "%b",limits = as.Date(c('2016-03-01','2017-12-12'))) +
        scale_linetype_manual('Seasonal', values = c(1,2), guide = "none") +
       scale_y_continuous(label=scientific, position = "right") +
        ylab("") +
        facet_wrap(~ presentable_names) +
  annotate("rect",
    xmin = as.Date.character("2016-03-01"),
    xmax = as.Date.character("2016-05-31"),
    ymin = -Inf,
    ymax = Inf,
    alpha = .37,
    fill = "grey"
    ) +
  annotate("rect",
    xmin = as.Date.character("2016-09-01"),
    xmax = as.Date.character("2016-11-30"),
    ymin = -Inf,
    ymax = Inf,
    alpha = .37,
    fill = "grey"
    ) +
    annotate("rect",
    xmin = as.Date.character("2017-03-01"),
    xmax = as.Date.character("2017-05-31"),
    ymin = -Inf,
    ymax = Inf,
    alpha = .37,
    fill = "grey"
    ) +
     annotate("rect",
    xmin = as.Date.character("2017-09-01"),
    xmax = as.Date.character("2017-11-30"),
    ymin = -Inf,
    ymax = Inf,
    alpha = .37,
    fill = "grey"
    ) 
  
   })


# If you want to supply the parameters to grid.arrange
inset <- do.call(grid.arrange, c(out, ncol=3))

ggplotify::as.ggplot(plotobj) +
 inset_element(ggplotify::as.ggplot(inset),0.225, 0.54, 0.71, 0.77, ignore_tag = TRUE, clip = FALSE)
ggplot2::ggsave("../results/EcoGenes_combined090.pdf", height = 18, width = 18, units = "cm")
ggplot2::ggsave("../results/EcoGenes_combined090.png", height = 18, width = 18, units = "cm")
                  


ggplot2::ggsave("../results/EcoGenes_combined090.pdf", plotobj, height = 18, width = 18, units = "cm")
ggplot2::ggsave("../results/EcoGenes_combined090.png", plotobj, height = 18, width = 18, units = "cm")

```

#Plotting all psbA-genes

```{r}
filtered_genes_and_paths_top50 %>%
  filter(Geneid %in% c("OFJACKGI_02436","OFJACKGI_00660","OFJACKGI_02602")) %>%
  ggplot(mapping = aes(x = dates, y = tpm, group = Geneid, fill = Geneid, colour = Geneid)) +
  geom_line() +
   theme_classic() +
        theme(
        #axis.title.x = element_blank(),
        axis.text.x = element_text(size =7, hjust = 1, angle = 60, colour = "black"),
       # axis.text.x = element_blank(),
        axis.text.y = element_text(size = 7, colour = "black"),
        #axis.text.y = element_blank(),
        axis.ticks = element_blank(),
        #legend.title = element_blank(),
        #legend.text = element_markdown(size = 7),
        #legend.text = element_blank(),
        legend.key.size = unit(0.3, 'cm'),
        #plot.margin = margin(t = 1, r = 1, b = 0, l = 1, "lines"),
        plot.margin=unit(c(0.0,0.0,0,0), "cm"),
        #legend.position = "none",
        #legend.box.spacing = unit(0, "pt"),
       # legend.margin=margin(0,0,0,0),
       # legend.spacing.x = unit(0.01, 'cm'),
        #strip.placement = "outside",
       # strip.text = element_markdown(size = 7, colour = "black"),
       strip.text = element_blank(),
        strip.background = element_blank()
        #legend.box.margin=margin(10,10,10,10)
    )  +
        #scale_colour_manual('Group', values = GEOM_COL_COLOURS[-1]) +
        scale_x_date(date_breaks = "2 months", date_labels = "%b",limits = as.Date(c('2016-03-01','2017-12-12'))) +
        scale_linetype_manual('Seasonal', values = c(1,2), guide = "none") +
       scale_y_continuous(label=scientific) +
        ylab("") +
   annotate("rect",
    xmin = as.Date.character("2016-03-01"),
    xmax = as.Date.character("2016-05-31"),
    ymin = -Inf,
    ymax = Inf,
    alpha = .37,
    fill = "grey"
    ) +
  annotate("rect",
    xmin = as.Date.character("2016-09-01"),
    xmax = as.Date.character("2016-11-30"),
    ymin = -Inf,
    ymax = Inf,
    alpha = .37,
    fill = "grey"
    ) +
    annotate("rect",
    xmin = as.Date.character("2017-03-01"),
    xmax = as.Date.character("2017-05-31"),
    ymin = -Inf,
    ymax = Inf,
    alpha = .37,
    fill = "grey"
    ) +
     annotate("rect",
    xmin = as.Date.character("2017-09-01"),
    xmax = as.Date.character("2017-11-30"),
    ymin = -Inf,
    ymax = Inf,
    alpha = .37,
    fill = "grey"
    ) 

ggsave("../results/psba_orfs090.png")
```

# Trying inset to dedal with the difference in data

```{r}

```

## Table with season info on the eco-genes

```{r}
EcogeneSeasonTable <- filtered_genes_and_paths_top50 %>%
  mutate(type = ifelse(
    Geneid %in% c(
      cyc.genes.tres %>% filter(type == "sig") %>% distinct(Geneid) %>% pull(Geneid)
      ), paste0("sig"), paste0("non-sig")
    )) %>%
  inner_join(season_info, by = "Geneid") %>%
  left_join(eggnog_table %>% distinct(Predicted_protein_name, Geneid), by = "Geneid") %>%
  group_by(Predicted_protein_name,Geneid, season) %>%
  summarise(tpm = sum(tpm)) %>%
  ungroup() %>%
  mutate(Cats = case_when(Predicted_protein_name %in% PS2 ~ paste0(VecOfvecs2[1]),
                          Predicted_protein_name %in% PS1 ~ paste0(VecOfvecs2[2]),
                          Predicted_protein_name %in% Antenna_proteins ~ paste0(VecOfvecs2[3]),
                          Predicted_protein_name %in% n_fixation ~ paste0(VecOfvecs2[4]),
                          Predicted_protein_name %in% c_fixation ~ paste0(VecOfvecs2[5]),
                          Predicted_protein_name %in% sunscreen_genes ~ paste0(VecOfvecs2[6]),
                          Predicted_protein_name %in% Phosphorus_scav_genes ~ paste0(VecOfvecs2[7]),
                          Predicted_protein_name %in% HeteroDiffGenes ~ paste0(VecOfvecs2[8]),
                          Predicted_protein_name %in% SigFac ~ paste0(VecOfvecs2[9]),
                          Predicted_protein_name %in% GasVesgenes ~ paste0(VecOfvecs2[10]),
                          Predicted_protein_name %in% Microcystin ~ paste0(VecOfvecs2[11]),
                          Predicted_protein_name %in% Anabaenopeptilide ~ paste0(VecOfvecs2[12]),
                          Predicted_protein_name %in% Anabaenopeptin ~ paste0(VecOfvecs2[13]),
                          Predicted_protein_name %in% Anabaenolysin ~ paste0(VecOfvecs2[14]),
                          Predicted_protein_name %in% Anacyclamide ~ paste0(VecOfvecs2[15]),
                          Predicted_protein_name %in% Anatoxin_a ~ paste0(VecOfvecs2[16]),
                          Predicted_protein_name %in% Hassallidin ~ paste0(VecOfvecs2[17]),
                          Predicted_protein_name %in% Aeruginosin ~ paste0(VecOfvecs2[18]),
                          Predicted_protein_name %in% Anabaenopeptin_Pseudospumigin_Microviridin ~ paste0(VecOfvecs2[19]),
                          Predicted_protein_name %in% Geosmin ~ paste0(VecOfvecs2[20]),
                          Predicted_protein_name %in% CylindrospermopsinGenes ~ paste0(VecOfvecs2[21]),
                          Predicted_protein_name %in% Circadian ~ paste0(VecOfvecs2[22]),
                          Predicted_protein_name %in% CobGenes ~ paste0(VecOfvecs2[23]),
                          Predicted_protein_name %in% FolGenes ~ paste0(VecOfvecs2[24]),
                          Predicted_protein_name %in% OxiStress ~ paste0(VecOfvecs2[25]),
                          
                          TRUE ~ "Other")) %>%
  filter(Cats != "Other") %>%
  group_by(season) %>%
  tally() %>%
  ungroup()
  
Ecogene <- filtered_genes_and_paths_top50 %>%
  mutate(type = ifelse(
    Geneid %in% c(
      cyc.genes.tres %>% filter(type == "sig") %>% distinct(Geneid) %>% pull(Geneid)
      ), paste0("sig"), paste0("non-sig")
    )) %>%
  inner_join(season_info, by = "Geneid") %>%
  left_join(eggnog_table %>% distinct(Predicted_protein_name, Geneid), by = "Geneid") %>%
  group_by(Predicted_protein_name,Geneid, season) %>%
  summarise(tpm = sum(tpm)) %>%
  ungroup() %>%
  mutate(Cats = case_when(Predicted_protein_name %in% PS2 ~ paste0(VecOfvecs2[1]),
                          Predicted_protein_name %in% PS1 ~ paste0(VecOfvecs2[2]),
                          Predicted_protein_name %in% Antenna_proteins ~ paste0(VecOfvecs2[3]),
                          Predicted_protein_name %in% n_fixation ~ paste0(VecOfvecs2[4]),
                          Predicted_protein_name %in% c_fixation ~ paste0(VecOfvecs2[5]),
                          Predicted_protein_name %in% sunscreen_genes ~ paste0(VecOfvecs2[6]),
                          Predicted_protein_name %in% Phosphorus_scav_genes ~ paste0(VecOfvecs2[7]),
                          Predicted_protein_name %in% HeteroDiffGenes ~ paste0(VecOfvecs2[8]),
                          Predicted_protein_name %in% SigFac ~ paste0(VecOfvecs2[9]),
                          Predicted_protein_name %in% GasVesgenes ~ paste0(VecOfvecs2[10]),
                          Predicted_protein_name %in% Microcystin ~ paste0(VecOfvecs2[11]),
                          Predicted_protein_name %in% Anabaenopeptilide ~ paste0(VecOfvecs2[12]),
                          Predicted_protein_name %in% Anabaenopeptin ~ paste0(VecOfvecs2[13]),
                          Predicted_protein_name %in% Anabaenolysin ~ paste0(VecOfvecs2[14]),
                          Predicted_protein_name %in% Anacyclamide ~ paste0(VecOfvecs2[15]),
                          Predicted_protein_name %in% Anatoxin_a ~ paste0(VecOfvecs2[16]),
                          Predicted_protein_name %in% Hassallidin ~ paste0(VecOfvecs2[17]),
                          Predicted_protein_name %in% Aeruginosin ~ paste0(VecOfvecs2[18]),
                          Predicted_protein_name %in% Anabaenopeptin_Pseudospumigin_Microviridin ~ paste0(VecOfvecs2[19]),
                          Predicted_protein_name %in% Geosmin ~ paste0(VecOfvecs2[20]),
                          Predicted_protein_name %in% CylindrospermopsinGenes ~ paste0(VecOfvecs2[21]),
                          Predicted_protein_name %in% Circadian ~ paste0(VecOfvecs2[22]),
                          Predicted_protein_name %in% CobGenes ~ paste0(VecOfvecs2[23]),
                          Predicted_protein_name %in% FolGenes ~ paste0(VecOfvecs2[24]),
                          Predicted_protein_name %in% OxiStress ~ paste0(VecOfvecs2[25]),
                          TRUE ~ "Other")) %>%
  filter(Cats != "Other") %>%
  mutate(Predicted_protein_name = ifelse(Predicted_protein_name %in% SigInfo, paste0(Predicted_protein_name,"*"), paste0(Predicted_protein_name)))

```

## Short info on winter activities, relate to Sved√©n et al. 2015.

Interestingly Sved√©n measure high N2-fixation rates, although gene expression in this case does not measure any expression. This should stil be visible as it is dark while sampling in winter (N2-fixation in dark higher?), but we don't see anything. The low in-situy temperature of sved√©n was 10 C, ewhich can match the April/May gene expression!

## For curiosity, correlate vesicle gene gvpC with biomass and see if it matches (check 2017), only present observations

```{r}

#Do biomass data now
## Reading in files
#Reading in a key for cruisenumber to date
LMODate <- read_tsv("../data/LMOCruiseToDate.tsv") %>%
   mutate(season = ifelse(grepl("201[0-9]-0[3-5]-", Date), "spring",
                           ifelse(grepl("201[0-9]-0[6-8]-", Date), "summer",
                                  ifelse(grepl("201[0-9]-09-|201[0-9]-10-|201[0-9]-11-", Date), "autumn", "winter"))))

phytoCount <- read_tsv("../data/phyto_counts_USE_20210614.tsv") %>% 
  inner_join(LMODate, by = "LMO") %>%
  filter(!is.na(Biomass_mgC_m3)) %>%# Removing NA's from dataset as they interfere with operations
  mutate(Year = str_extract(Date, "[0-9][0-9][0-9][0-9]")) # Adding year as a separate column#


AphaCounts <- phytoCount %>%
  filter(Genus %in% c("Aphanizomenon")) %>%
  group_by(Date, Genus) %>%
  summarise(Biomass_mgC_m3 = sum(Biomass_mgC_m3)) %>%
  ungroup() %>%
  inner_join(phytoCount %>% distinct(Date, Year), by = "Date") %>%
  mutate(year_day = case_when(Year == "2011" ~ julian(Date, origin = as.Date("2011-01-01")),
                              Year == "2012" ~ julian(Date, origin = as.Date("2012-01-01")),
                              Year == "2013" ~ julian(Date, origin = as.Date("2013-01-01")),
                              Year == "2014" ~ julian(Date, origin = as.Date("2014-01-01")),
                              Year == "2015" ~ julian(Date, origin = as.Date("2015-01-01")),
                              Year == "2016" ~ julian(Date, origin = as.Date("2016-01-01")),
                              Year == "2017" ~ julian(Date, origin = as.Date("2017-01-01")),
                              Year == "2018" ~ julian(Date, origin = as.Date("2018-01-01")),
                              Year == "2019" ~ julian(Date, origin = as.Date("2019-01-01"))
                              )) %>%
  filter(Year %in% c("2016","2017"))



corr_df <- AphaCounts %>%
  inner_join(
    filtered_genes_and_paths_top50 %>%
  left_join(eggnog_table %>% distinct(Predicted_protein_name, Geneid), by = "Geneid") %>%
  group_by(Predicted_protein_name, dates) %>%
  summarise(tpm = sum(tpm)) %>%
  ungroup() %>%
  filter(Predicted_protein_name == "gvpC") %>%
    rename(Date = "dates"),
  by = "Date"
  ) %>%
  filter(Biomass_mgC_m3 > 0) #%>%
  #filter(Year == "2017")

cor.test(corr_df$tpm, corr_df$Biomass_mgC_m3, method = "spearman", alternative = "two.sided")

corr_df %>%
  ggplot(mapping = aes(x = Biomass_mgC_m3, y = tpm, colour = Year)) +
  geom_point()

#There is such a large difference between years, in 2017 it seems plausible, in 2016 it is completely bonkers
```

```{r}
SeasInfo %>%
    left_join(eggnog_table %>% distinct(Predicted_protein_name, Geneid), by = "Geneid") %>% view()


# rbr from Lumppio et al. 2001, djlA from Genevaux et al. 2001 and refs therein, dnaJ and grpE from Bukau & Horwich 1998
AphGenes <- filtered_genes_and_paths_top50 %>%
  left_join(eggnog_table %>% distinct(Predicted_protein_name, Geneid), by = "Geneid") %>%
  group_by(Predicted_protein_name, dates) %>%
  summarise(tpm = sum(tpm)) %>%
  ungroup()

filtered_genes_and_paths_top50 %>%
  semi_join(Seasonal_infos, by = "Geneid") %>% view()

AphGenes %>%
  group_by(Predicted_protein_name) %>%
  mutate(zscore = (tpm - mean(tpm))/sd(tpm)) %>%
  ungroup() %>%
  filter(Predicted_protein_name %in% c("dpsA")) %>%
  ggplot(mapping=aes(x = dates, y = tpm, colour = Predicted_protein_name)) +
  geom_line() +
  theme_classic() +
  theme(
        axis.title.x = element_blank(),
        axis.text.x = element_text(size = 9),
        axis.text.y = element_text(size = 9),
        strip.placement = "outside",
        strip.text = element_text(size = 9),
        plot.margin = margin(t = 1, r = 1, b = 0, l = 1, "lines"),
        legend.position = "right",
        legend.text = element_text(size = 9)
    ) +
  scale_x_date(date_breaks = "2 months", date_labels = "%b") +
  annotate("rect",
    xmin = as.Date.character("2016-03-01"),
    xmax = as.Date.character("2016-05-31"),
    ymin = -Inf,
    ymax = Inf,
    alpha = .37,
    fill = "grey"
    ) +
  annotate("rect",
    xmin = as.Date.character("2016-09-01"),
    xmax = as.Date.character("2016-11-30"),
    ymin = -Inf,
    ymax = Inf,
    alpha = .37,
    fill = "grey"
    ) +
    annotate("rect",
    xmin = as.Date.character("2017-03-01"),
    xmax = as.Date.character("2017-05-31"),
    ymin = -Inf,
    ymax = Inf,
    alpha = .37,
    fill = "grey"
    ) +
     annotate("rect",
    xmin = as.Date.character("2017-09-01"),
    xmax = as.Date.character("2017-11-30"),
    ymin = -Inf,
    ymax = Inf,
    alpha = .37,
    fill = "grey"
    ) #+
  #facet_wrap(~Predicted_protein_name, scales = "free_y", ncol = 1)


#No clear pattern here
#Running a short spearman-correlation here for curiosity
genecorr <- AphGenes %>%
  filter(Predicted_protein_name %in% c("psbF","hetR")) %>%
  pivot_wider(names_from = Predicted_protein_name, values_from = tpm, values_fill = 0) %>%
  column_to_rownames("dates") %>%
  as.matrix()

cor.test(genecorr[,1], genecorr[,2], method = "spearman", alternative = "two.sided")


```

```{r}
Zero <- filtered_genes_and_paths_top50 %>%
  select(Geneid, tpm, dates) %>%
  pivot_wider(names_from = "Geneid", values_from = "tpm", values_fill = 0) %>%
  pivot_longer(2:ncol(.), names_to = "Geneid", values_to = "tpm") %>% 
  inner_join(Seasonal_infos, by = "Geneid")
```

## More gene expression investigation focusing on seasons that are not summer

```{r}

#Inlcude geens based on their seasonal optima in winter, spring and autumn.
  #Extract and look at genes in these optima based on RAIN-figure and mean tpm expression

## Winter expression
#GshAB genes from the paper by Cameron and Pakrasi, 2010 -> Very nice autumn to spring expression


#Sulfur metabolism genes (See Salazar et al., 2019) -> 
SulfGenes <- c("aprA","aprB" ,"cysC","cysK", "cysM","cysH","cysJ","cysI","cysN","cysD") #Deprecated

# More N-assimilation
Glutamate <- c("gltB") # Deprecated



#Vitamin genes -> cbi and cob for example

 #Keep
 #Keep

#Urease
Urease <- c("ureA","ureB","ureC","ureD","ureD","ureE","ureF","ureG") # Exclude
#Urea transport
UreaTran <- c("urtA","urtB","urtC","urtD","urtE") #Exclude
# Look into spring (riboflavin)
RibGenes <- c("ribD","ribE","ribF","ribG", "ribH")


filtered_genes_and_paths_top50 %>%
  group_by(Geneid, dates) %>%
  summarise(tpm = sum(tpm)) %>%
  ungroup() %>%
  left_join(eggnog_table %>% distinct(Predicted_protein_name, Geneid), by = "Geneid") %>%
  mutate(Cats = case_when(#Predicted_protein_name %in% GlutaGenes ~ "Glutathione",
                          #Predicted_protein_name %in% SulfGenes ~ "Sulfur",
                          #Predicted_protein_name %in% Glutamate ~ "Glutamate",
                         # Predicted_protein_name %in% FolGenes ~ "Folate",
                         # Predicted_protein_name %in% CobGenes ~ "Cobalamin",
                          Predicted_protein_name %in% NitMet ~ "Nitrogen metabolism",
                          #Predicted_protein_name %in% UreaTran ~ "Urea transport",
                          #Predicted_protein_name %in% RibGenes ~ "Riboflavin",
                          TRUE ~ "Other")) %>%
  filter(Cats != "Other") %>%
 # mutate(Predicted_protein_name = ifelse(Predicted_protein_name %in% SigInfo, paste0(Predicted_protein_name,"*"), paste0(Predicted_protein_name))) %>%
  mutate(Group = paste(Cats, Predicted_protein_name, sep = ".")) %>%
  ggplot(mapping = aes(x = dates, y = tpm, group = Geneid, colour = Group)) +
  geom_line() +
  facet_wrap(~ Cats, scales = "free_y") +
  theme_classic() +
  theme(
        axis.title.x = element_blank(),
        axis.text.x = element_text(size = 9),
        axis.text.y = element_text(size = 9),
        strip.placement = "outside",
        strip.text = element_text(size = 9),
        plot.margin = margin(t = 1, r = 1, b = 0, l = 1, "lines"),
        legend.position = "right",
        legend.text = element_text(size = 9)
    ) +
 # scale_colour_manual('Gene', values = GEOM_COL_COLOURS) +
 # guides(colour=guide_legend(ncol=2,byrow=FALSE)) +
  scale_x_date(date_breaks = "2 months", date_labels = "%b") +
  annotate("rect",
    xmin = as.Date.character("2016-03-01"),
    xmax = as.Date.character("2016-05-31"),
    ymin = -Inf,
    ymax = Inf,
    alpha = .37,
    fill = "grey"
    ) +
  annotate("rect",
    xmin = as.Date.character("2016-09-01"),
    xmax = as.Date.character("2016-11-30"),
    ymin = -Inf,
    ymax = Inf,
    alpha = .37,
    fill = "grey"
    ) +
    annotate("rect",
    xmin = as.Date.character("2017-03-01"),
    xmax = as.Date.character("2017-05-31"),
    ymin = -Inf,
    ymax = Inf,
    alpha = .37,
    fill = "grey"
    ) +
     annotate("rect",
    xmin = as.Date.character("2017-09-01"),
    xmax = as.Date.character("2017-11-30"),
    ymin = -Inf,
    ymax = Inf,
    alpha = .37,
    fill = "grey"
    )
```

```{r}

#Inspection of autumn cluster

filtered_genes_and_paths_top50 %>%
  group_by(Geneid, dates) %>%
  summarise(tpm = sum(tpm)) %>%
  ungroup() %>%
  left_join(eggnog_table %>% distinct(Predicted_protein_name, Geneid), by = "Geneid") %>%
  filter(Geneid %in% c(Seasonal_infos %>% filter(season == "Autumn") %>% pull(Geneid))) %>%
 # mutate(Cats = case_when(#Predicted_protein_name %in% GlutaGenes ~ "Glutathione",
                          #Predicted_protein_name %in% SulfGenes ~ "Sulfur",
                          #Predicted_protein_name %in% Glutamate ~ "Glutamate",
                         # Predicted_protein_name %in% FolGenes ~ "Folate",
                         # Predicted_protein_name %in% CobGenes ~ "Cobalamin",
                       #   Predicted_protein_name %in% Urease ~ "Urease",
                       #   Predicted_protein_name %in% UreaTran ~ "Urea transport",
                          #Predicted_protein_name %in% RibGenes ~ "Riboflavin",
                       #   TRUE ~ "Other")) %>%
 # filter(Cats != "Other") %>%
 # mutate(Predicted_protein_name = ifelse(Predicted_protein_name %in% SigInfo, paste0(Predicted_protein_name,"*"), paste0(Predicted_protein_name))) %>%
 # mutate(Group = paste(Cats, Predicted_protein_name, sep = ".")) %>%
  ggplot(mapping = aes(x = dates, y = tpm, group = Geneid, colour = Predicted_protein_name)) +
  geom_line() +
 # facet_wrap(~ Cats, scales = "free_y") +
  theme_classic() +
  theme(
        axis.title.x = element_blank(),
        axis.text.x = element_text(size = 9),
        axis.text.y = element_text(size = 9),
        strip.placement = "outside",
        strip.text = element_text(size = 9),
        plot.margin = margin(t = 1, r = 1, b = 0, l = 1, "lines"),
        legend.position = "right",
        legend.text = element_text(size = 9)
    ) +
 # scale_colour_manual('Gene', values = GEOM_COL_COLOURS) +
 # guides(colour=guide_legend(ncol=2,byrow=FALSE)) +
  scale_x_date(date_breaks = "2 months", date_labels = "%b") +
  annotate("rect",
    xmin = as.Date.character("2016-03-01"),
    xmax = as.Date.character("2016-05-31"),
    ymin = -Inf,
    ymax = Inf,
    alpha = .37,
    fill = "grey"
    ) +
  annotate("rect",
    xmin = as.Date.character("2016-09-01"),
    xmax = as.Date.character("2016-11-30"),
    ymin = -Inf,
    ymax = Inf,
    alpha = .37,
    fill = "grey"
    ) +
    annotate("rect",
    xmin = as.Date.character("2017-03-01"),
    xmax = as.Date.character("2017-05-31"),
    ymin = -Inf,
    ymax = Inf,
    alpha = .37,
    fill = "grey"
    ) +
     annotate("rect",
    xmin = as.Date.character("2017-09-01"),
    xmax = as.Date.character("2017-11-30"),
    ymin = -Inf,
    ymax = Inf,
    alpha = .37,
    fill = "grey"
    )
```

## Further selection of important genes in seasons other than summer

The cobalamin gene cluster expressed genes which peaked in all seasons but summer, interestingly gene duplicates of the genes with different seasonal optima was observed.

```{r}
Inv <- SeasInfo %>%
    inner_join(eggnog_table %>% distinct(Geneid, Predicted_protein_name, KEGG_ko), by = "Geneid")


#Genes in relation to questions appearing (the URE and URT genes)

#Urease
Urease <- c("ureA","ureB","ureC","ureD","ureD","ureE","ureF","ureG","amtB") # Exclude
#Urea transport
UreaTran <- c("urtA","urtB","urtC","urtD","urtE") #Exclude

filtered_genes_and_paths_top50 %>%
  group_by(Geneid, dates) %>%
  summarise(tpm = sum(tpm)) %>%
  ungroup() %>%
  left_join(eggnog_table %>% distinct(Predicted_protein_name, Geneid), by = "Geneid") %>%
  mutate(Cats = case_when(#Predicted_protein_name %in% GlutaGenes ~ "Glutathione",
                          #Predicted_protein_name %in% SulfGenes ~ "Sulfur",
                          #Predicted_protein_name %in% Glutamate ~ "Glutamate",
                         # Predicted_protein_name %in% FolGenes ~ "Folate",
                         # Predicted_protein_name %in% CobGenes ~ "Cobalamin",
                          Predicted_protein_name %in% Urease ~ "Urease",
                          Predicted_protein_name %in% UreaTran ~ "Urea transport",
                          #Predicted_protein_name %in% RibGenes ~ "Riboflavin",
                          TRUE ~ "Other")) %>%
  filter(Cats != "Other") %>%
 # mutate(Predicted_protein_name = ifelse(Predicted_protein_name %in% SigInfo, paste0(Predicted_protein_name,"*"), paste0(Predicted_protein_name))) %>%
  mutate(Group = paste(Cats, Predicted_protein_name, sep = ".")) %>%
  ggplot(mapping = aes(x = dates, y = tpm, group = Geneid, colour = Group)) +
  geom_line() +
  facet_wrap(~ Cats, scales = "free_y") +
  theme_classic() +
  theme(
        axis.title.x = element_blank(),
        axis.text.x = element_text(size = 9),
        axis.text.y = element_text(size = 9),
        strip.placement = "outside",
        strip.text = element_text(size = 9),
        plot.margin = margin(t = 1, r = 1, b = 0, l = 1, "lines"),
        legend.position = "right",
        legend.text = element_text(size = 9)
    ) +
 # scale_colour_manual('Gene', values = GEOM_COL_COLOURS) +
 # guides(colour=guide_legend(ncol=2,byrow=FALSE)) +
  scale_x_date(date_breaks = "2 months", date_labels = "%b") +
  annotate("rect",
    xmin = as.Date.character("2016-03-01"),
    xmax = as.Date.character("2016-05-31"),
    ymin = -Inf,
    ymax = Inf,
    alpha = .37,
    fill = "grey"
    ) +
  annotate("rect",
    xmin = as.Date.character("2016-09-01"),
    xmax = as.Date.character("2016-11-30"),
    ymin = -Inf,
    ymax = Inf,
    alpha = .37,
    fill = "grey"
    ) +
    annotate("rect",
    xmin = as.Date.character("2017-03-01"),
    xmax = as.Date.character("2017-05-31"),
    ymin = -Inf,
    ymax = Inf,
    alpha = .37,
    fill = "grey"
    ) +
     annotate("rect",
    xmin = as.Date.character("2017-09-01"),
    xmax = as.Date.character("2017-11-30"),
    ymin = -Inf,
    ymax = Inf,
    alpha = .37,
    fill = "grey"
    )


```

## Table S2 counts-mapping (supplement with assembly counts)

```{r}
cds_table %>% 
  inner_join(lmo_id_date, by = "sample") %>%
  dplyr::filter(filter_frac == "unfiltered") %>%
  filter(MAG == "P1994_122_bin236") %>%
  group_by(sample, MAG) %>% 
  summarise(counts = as.integer(sum(counts))) %>%
  ungroup() %>%
  select(-MAG) %>%
  inner_join(lmo_id_date %>% select(sample, dates), by = "sample") %>%
  select(sample, dates, counts) %>%
  write_tsv("../results/Aphanizomenon_sample_counts090.tsv")
```

## Table S4 counts-mapping (tpm per orf per sample, and RAIN-status)

```{r}

#Add all the genome information, i.e even unexpressed genes.
filtered_genes_and_paths_top50 %>%
  select(dates, Geneid, tpm) %>%
  inner_join(eggnog_table %>% distinct(Geneid, Predicted_protein_name), by = "Geneid") %>%
  left_join(cyc.genes.tres, by = "Geneid") %>%
  write_tsv("../results/orf_tpms090.tsv")
```
