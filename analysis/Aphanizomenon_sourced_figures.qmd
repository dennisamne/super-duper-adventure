---
title: "Aphanizomenon_sourced_figures"
author: "Dennis Amnebrink"
affiliation-title: "Linnaeus University"
title-block-banner: true
date: now
editor: visual
toc: true
prefer-html: true
number-sections: true
format:
  html:
     code-fold: true
     self-contained: true
---

```{r}
#| label: libraries
#| warning: false
library(data.table)
library(tidyverse)
library(vegan)
library(rain)
library(ggConvexHull)
library(DT)
```

```{r}
#| label: colourscheme treatments
#| warning: false
GEOM_COL_COLOURS = c(
  RColorBrewer::brewer.pal(12, name = 'Paired'))

SEASON_COLOURS = c("spring" = "#33A02C", "summer" = "#E31A1C",  "autumn" =  "#FF7F00", "winter" = "#1F78B4")
```

```{r}
#| label: files
#| warning: false
#| cache: true
# Loading annotation file
  eggnog_names <- c("Geneid", "MAG", "contig", "Start", "End", "Strand", "Length", "seed_eggNOG_ortholog", "seed_ortholog_evalue", "seed_ortholog_score", "Predicted_taxonomic_group", "Predicted_protein_name", "Gene_Ontology_terms", "EC_number", "KEGG_ko", "KEGG_Pathway", "KEGG_Module", "KEGG_Reaction", "KEGG_rclass", "BRITE", "KEGG_TC", "CAZy", "BiGG Reaction", "tax_scope:eggNOG_taxonomic_level_used_for_annotation", "eggNOG_OGs", "bestOG", "COG_Functional_Category", "eggNOG_free_text_description", "sample", "counts")
  
  eggnog_table <- read_tsv("../data/eggnog_table_long.tsv.gz", col_types = cols(Start = col_integer(), End = col_integer(), Length = col_integer(), counts = col_integer(), X7 = col_character())) %>%
                             separate(Chr, c("MAG", "contig"), sep ="_k", remove = TRUE)
  eggnog_table$sample <- sub('.non_rRNA.pe.bowtie2.q5', '', eggnog_table$sample)
   eggnog_table$sample <- sub('.ca.pesickle.pe.bowtie2.sorted.unmappedpairs.pe.bowtie2.q5', '', eggnog_table$sample) 
   eggnog_table$sample <- sub('.lane00[0-9].ca.pesickle.pe.bowtie2.q5', '', eggnog_table$sample) 
   eggnog_table$sample <- sub("^", "P", eggnog_table$sample)
   eggnog_table$sample <- sub("PP", "P", eggnog_table$sample)
   eggnog_table$sample <- sub(".sorted.bam", "", eggnog_table$sample)
   
   colnames(eggnog_table) <- eggnog_names
   
   # Loading date file/sample key
   lmo_id_date <- read_tsv("../data/lmo_id_date.tsv.gz") %>%
    dplyr::select(1, 2) %>% 
    dplyr::rename(dates=2) %>%
    dplyr::rename(sample="Sample") %>%
    mutate(season = ifelse(grepl("201[0-9]-0[3-5]-", dates), "spring",
                           ifelse(grepl("201[0-9]-0[6-8]-", dates), "summer",
                                  ifelse(grepl("201[0-9]-09-|201[0-9]-10-|201[0-9]-11-", dates), "autumn", "winter")))) %>%
    mutate(filter_frac = ifelse(grepl("201[2-5]", dates), "filtered", "unfiltered")) %>%
    mutate(year = str_extract(dates, "[0-9][0-9][0-9][0-9]"))
  lmo_id_date$sample <- sub('P12052_1', 'P12052_3', lmo_id_date$sample) 
  
  #Taxonomy file
  BACL_taxonomy <- read_tsv("../data/BACL_identities.tsv.gz") %>%
    separate("Taxonomy", c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species"), sep = ";[a-z]__", remove = T) %>%
    mutate(location = ifelse(grepl("*P2236*",MAG ), "redox",
                             ifelse(grepl("*P1994*", MAG), "transect",
                                    ifelse(grepl("*SRR*", MAG), "ask√∂", "LMO"))))
  
  # Orf-file
cds_table<- read_tsv("../data/cds_counts_filtered.tsv")

COG_cats <- read_tsv("../data/COG_categories.tsv") %>%
  rename(COG_Functional_Category = "COG_category")

```

```{r}
#| label: filtering-low-abundant-dates
#| warning: false
#| cache: true

genes_and_paths_top50 <- cds_table %>% 
  inner_join(lmo_id_date, by = "sample") %>%
  dplyr::filter(filter_frac == "unfiltered") %>%
  group_by(dates, Geneid, MAG) %>% 
  summarise(counts = as.integer(mean(counts))) %>%
  ungroup() %>%
  inner_join(cds_table %>% distinct(Geneid, Length)) %>%
  group_by(MAG, dates) %>%
  mutate(t = counts/Length) %>%
  mutate(tpm = t/sum(t)*1e6) %>%
  ungroup() %>%
  dplyr::select(-t) %>%
  filter(MAG == "P1994_122_bin236") 
 
cds_table_filtered <- cds_table %>%  inner_join(lmo_id_date, by = "sample") %>% dplyr::filter(filter_frac == "unfiltered") %>% group_by(dates, MAG, Geneid) %>% summarise(counts = mean(counts)) %>% ungroup() %>% group_by(MAG, dates) %>% summarise(counts = sum(counts)) %>% ungroup() %>% dplyr::filter(counts >= 3000)

genes_and_paths_top50 %>% semi_join(cds_table_filtered, by = c("MAG","dates")) -> filtered_genes_and_paths_top50
```

# Intro

This document handles gene expression analysis of BACL63, or P1994_122_bin236, short about the BACL: It is 99.89% complete, 0.89% contamination, of which 80% is explained by strain heterogeneity (closely related contamination).

## PCA

PCA plotting of Aphanizomenon orf-level expression based on bray-curtis distances of hellinger transformed counts produces a clear separation between summer expression and the three other seasons (@fig-PCA_orf_level). One could take it a step further and separate summer into early- and late summer respectively.

```{r}
#| label: fig-PCA_orf_level
#| warning: false
#| fig-cap: "PCA of orf-level functional expression for Aphanizomenon during years 2016-2017. Colours denote season and shape year."
orf_mat <- filtered_genes_and_paths_top50 %>%
  filter(MAG == "P1994_122_bin236") %>%
  select(dates, Geneid, counts) %>%
  pivot_wider(names_from ="Geneid", values_from = counts, values_fill = 0) %>%
  column_to_rownames("dates") %>%
  as.matrix()

# Hellinger transformation and then bray-curtis distances

PCA <- rda(decostand(orf_mat, method = "hellinger"), distance = "bray")

eigenvalues <- as.data.frame(PCA$CA$eig) %>%
    rownames_to_column("PC_axes") %>%
    rename(eigenvalues = "PCA$CA$eig") %>%
    mutate(eigenvalues_variation_explained = (eigenvalues/sum(eigenvalues) * 100))

pca_df <- as.data.frame(PCA$CA$u) %>%
  rownames_to_column("dates") %>%
  mutate(dates = as.Date(dates)) %>%
  inner_join(lmo_id_date %>% distinct(dates, season), by = "dates") %>%
  as.data.frame()

pca_df %>%
  mutate(dates2 = str_extract(dates, "[0-9][0-9]-[0-9][0-9]$")) %>%
  mutate(year = str_extract(dates, "[0-9][0-9][0-9][0-9]")) %>%
  ggplot(mapping = aes(x = PC1, y = PC2, text = dates2, colour = season, fill = season, label = dates2, shape = year)) +
  geom_point() +
  geom_text(nudge_x = 0.01, size = 3) +
  scale_colour_manual('Season',values = SEASON_COLOURS) +
  scale_fill_manual('Season',values = SEASON_COLOURS) +
  scale_shape_manual('Year', values = c(16,17)) +
  xlab(paste("PC1", round(eigenvalues$eigenvalues_variation_explained[1], digits = 2),"%", sep = " ")) +
  ylab(paste("PC2", round(eigenvalues$eigenvalues_variation_explained[2], digits = 2),"%", sep = " ")) +
  theme_minimal() +
  theme(panel.grid = element_blank()) +
  geom_vline(xintercept = 0, linetype = "dashed", size = 0.5) +
  geom_hline(yintercept=0, linetype="dashed", size = 0.5) +
  geom_convexhull(aes(x = PC1, y = PC2, group = season, fill = season), alpha = 0.2, show.legend = FALSE)
```

## Rain

```{r rain_final_52_weeks_orf_level}
#| label: rain-run
#| warning: false
#| cache: true
for_rain <- cds_table %>%
    inner_join(lmo_id_date, by = "sample") %>%
    filter(filter_frac == "unfiltered") %>%
    filter(MAG == "P1994_122_bin236") %>%
    group_by(MAG, dates) %>%
    mutate(t = counts/Length) %>%
    mutate(tpm = t/sum(t)*1e6) %>%
    ungroup() %>%
    select(-t) %>%
    group_by(Geneid, MAG, dates) %>%
    summarise(tpm = sum(tpm)) %>%
    ungroup()

# Before the loop
all_weeks <- as.data.frame(seq(from = 1, to = 104, by = 1)) 

colnames(all_weeks) <- "week"

mag_list = list()

sig_cor_mag <- "P1994_122_bin236"

# Making the table again with counts, to exclude low counts, use this as a semijoin by Geneid beforfe spreading

counts_filter <- cds_table %>%
    inner_join(lmo_id_date, by = "sample") %>%
    filter(filter_frac == "unfiltered") %>%
    filter(MAG == "P1994_122_bin236") %>%
    group_by(MAG, dates, Geneid) %>%
    mutate(counts = mean(counts)) %>%
    ungroup() %>%
    select(Geneid, counts, dates) %>%
    group_by(Geneid) %>%
    summarise(tot_counts = sum(counts)) %>%
    ungroup() %>%
    filter(tot_counts > 100)

counts_filter2 <- cds_table %>%
    inner_join(lmo_id_date, by = "sample") %>%
    filter(filter_frac == "unfiltered") %>%
    filter(MAG == "P1994_122_bin236") %>%
    group_by(MAG, dates, Geneid) %>%
    mutate(counts = mean(counts)) %>%
    ungroup() %>%
    select(Geneid, counts, dates) %>%
    semi_join(counts_filter, by = "Geneid") %>%
    group_by(Geneid) %>%
    tally() %>%
    ungroup() %>%
    filter(n > 2)
  

# This works, now make the argument for counts in 2 samples or less, e.g counts != 0 in 
mag_time_points <- for_rain %>%
  mutate(year_day = julian(dates, origin = as.Date("2016-01-01"))) %>%
  mutate(week = ceiling(year_day/7))  %>%
  semi_join(filtered_genes_and_paths_top50, by = c("MAG","dates")) %>%
  semi_join(counts_filter, by = "Geneid") %>%
  filter(MAG == "P1994_122_bin236") %>%
  select(week, Geneid, tpm) %>%
  spread(Geneid, tpm, fill = 0)

# Tally 

 mag_time_points <- mag_time_points  %>% 
 column_to_rownames("week") 

for (n in sig_cor_mag) {
  
  # IN the loop
mag_time_points <- for_rain %>%
  mutate(year_day = julian(dates, origin = as.Date("2016-01-01"))) %>%
  mutate(week = ceiling(year_day/7))  %>%
  semi_join(filtered_genes_and_paths_top50, by = c("MAG","dates")) %>%
  semi_join(counts_filter2, by = "Geneid") %>%
  filter(MAG == n) %>%
  select(week, Geneid, tpm) %>%
  spread(Geneid, tpm, fill = 0) 

# Joining in to create the measure.sequence vector
vec <- all_weeks %>%
  left_join(mag_time_points, by = "week") %>%
  column_to_rownames("week") %>%
  replace(is.na(.), 0) %>%
  mutate(vector = ifelse(rowSums(.) > 0, 1,0)) %>%
  select(vector)

mag_time_points <- mag_time_points  %>% column_to_rownames("week") %>%
  as.matrix()


mag_list[[n]] <- rain::rain(mag_time_points, deltat = 1, period = 52, nr.series = 1 , measure.sequence= vec$vector)

print(n)
}

bind_rows(mag_list, .id = "mag") -> df
# Done on filtered dates > 3000 counts
df %>%
  mutate(fdr = p.adjust(pVal, method = "fdr")) %>%
  rownames_to_column("Geneid") %>% 
  select(-mag) %>%
  mutate(type = ifelse(fdr >= 0.05, "non-sig","sig")) %>%
  write_tsv(.,"../data/cyclical_genes_aphani.tres.tsv")

cyc.genes.tres <- read_tsv("../data/cyclical_genes_aphani.tres.tsv")
```

To identify seasonal expression patterns, a [RAIN](https://pubmed.ncbi.nlm.nih.gov/25326247/) analysis on the orf-level of Aphanizomenon revealed that `r length(which(cyc.genes.tres$fdr <= 0.05))` out of `r nrow(cyc.genes.tres)` showed significant seasonal expression patterns. The annotation of every orf and its corresponding fdr-adjusted p-value is provided in table @fig-Rain_table_supp. (Quarto doesn't recognize datatable-output as a table so bear with me here). Analysis was run on the within-mag normalised tpm values (all genes in the MAG summarised per date adds up to a million).

```{r}
#| label: fig-Rain_table_supp
#| fig-cap: Table summarising RAIN output on the Aphanizomenon orf-level analysis.
#| warning: false

DT::datatable(cyc.genes.tres %>% 
        left_join(eggnog_table %>% distinct(Geneid, Predicted_protein_name , eggNOG_free_text_description), 
                  by = "Geneid") %>%
        arrange(Predicted_protein_name), filter = "top")  
```

Following this, the seasonality of all the significant genes was identified based on their max expression value date (I.e the season of the date with highest expression determined the seasonality of a particular gene). Adding a smoothing function the temporal optima becomes clear, but even plotting every individual gene together produce a simiar result @fig-rain_genes. I have a slight suspicion that the summer cluster is correlated with a higher growth, I think the small bump seen in winter might correlate with the higher phytoplankton counts on the 15th of Feb in 2017. (**VERIFY THIS**).

```{r}
#| label: fig-rain_genes
#| fig-cap: Z-score normalised expression of Aphanizomenon orfs that were significant in RAIN.
#| fig-subcap: 
#|   - "Smoothing function summarising the seasonal clusters"
#|   - "Plotting every orf individually and colouring it according to the season of highest expression."
#| warning: false

#Identification of seasonality among the significant genes.
season_info <- filtered_genes_and_paths_top50 %>%
  group_by(Geneid) %>%
  filter(tpm == max(tpm)) %>%
  ungroup() %>%
  inner_join(lmo_id_date %>% distinct(dates, season), by = "dates") %>%
  select(Geneid, season)

filtered_genes_and_paths_top50 %>%
  inner_join(season_info, by = "Geneid") %>%
  group_by(Geneid) %>%
  mutate(zscore = (tpm - mean(tpm))/ sd(tpm) ) %>%
  ungroup() %>%
  semi_join(cyc.genes.tres %>% filter(type == "sig"), by = "Geneid") %>%
  ggplot(mapping = aes(x = dates, y = zscore, colour = season)) +
  theme_bw() +
  theme(panel.grid = element_blank()) +
  geom_smooth() +
  scale_colour_manual('Season', values = SEASON_COLOURS)

# Unsmoothed version
filtered_genes_and_paths_top50 %>%
  inner_join(season_info, by = "Geneid") %>%
  group_by(Geneid) %>%
  mutate(zscore = (tpm - mean(tpm))/ sd(tpm) ) %>%
  ungroup() %>%
  semi_join(cyc.genes.tres %>% filter(type == "sig"), by = "Geneid") %>%
  ggplot(mapping = aes(x = dates, y = zscore, colour = season, group = Geneid)) +
  theme_bw() +
  geom_line() +
  scale_colour_manual('Season', values = SEASON_COLOURS)
```

### COG-summary of RAIN Genes as opposed to non-RAIN genes

a quick COG-functional summary partitioned among the RAIN and non-RAIN genes show that both energy metabolism and Translation, ribosomal structure and biogenesis exhibit summer peaks @fig-COG_catsRAIN. Instead the non-seasonal genes exhibit a stable pattern overall, as expected.
```{r}
#| label: fig-COG_catsRAIN
#| fig-cap: summarised tpm values of rain and non-rain genes across the different functional COG-categories.
#| fig-subcap: 
#|   - "RAIN-genes"
#|   - "non-RAIN-genes."
#| warning: false

scale25 <- c(
  "dodgerblue2", "#E31A1C", # red
  "green4",
  "#6A3D9A", # purple
  "#FF7F00", # orange
  "black", "gold1",
  "skyblue2", "#FB9A99", # lt pink
  "palegreen2",
  "#CAB2D6", # lt purple
  "#FDBF6F", # lt orange
  "gray70", "khaki2",
  "maroon", "orchid1", "deeppink1", "blue1", "steelblue4",
  "darkturquoise", "green1", "yellow4", "yellow3",
  "darkorange4", "brown"
)


filtered_genes_and_paths_top50 %>%
  inner_join(season_info, by = "Geneid") %>%
  semi_join(cyc.genes.tres %>% filter(type == "sig"), by = "Geneid") %>%
  inner_join(eggnog_table %>%
               distinct(Geneid, COG_Functional_Category,
                        by = "Geneid")) %>%
  separate_rows(COG_Functional_Category, sep = "(?<=.)(?=.)") %>%
  filter(!is.na(COG_Functional_Category)) %>%
  group_by(dates, COG_Functional_Category) %>%
  summarise(tpm = sum(tpm)) %>%
  ungroup() %>%
  inner_join(COG_cats, by = "COG_Functional_Category") %>%
  ggplot(mapping = aes(x = dates, y = tpm, fill = full_name)) +
  geom_area( ) +
  theme_bw() +
  scale_fill_manual('COG category', values = scale25)

filtered_genes_and_paths_top50 %>%
  inner_join(season_info, by = "Geneid") %>%
   semi_join(cyc.genes.tres %>% filter(type == "non-sig"), by = "Geneid") %>%
  inner_join(eggnog_table %>%
               distinct(Geneid, COG_Functional_Category,
                        by = "Geneid")) %>%
  separate_rows(COG_Functional_Category, sep = "(?<=.)(?=.)") %>%
  filter(!is.na(COG_Functional_Category)) %>%
  group_by(dates, COG_Functional_Category) %>%
  summarise(tpm = sum(tpm)) %>%
  ungroup() %>%
   inner_join(COG_cats, by = "COG_Functional_Category") %>%
  ggplot(mapping = aes(x = dates, y = tpm, fill = full_name)) +
  geom_area( ) +
  theme_bw() +
  scale_fill_manual('COG category', values = scale25) +
  guides(fill = guide_legend(ncol=1))
```

## Identify metabolism genes of interest and place them in the respective clusters.
```{r}
#| label: geneVecs
#| warning: false

#photosystem genes" -" PSI and PS22, look at the modules, as seen by Evangelia" "Genes of interest: PS2 Psb[A-F], PS1 psa[A-O], psaX"
 PS2 <- c("psbA", "psbB", "psbC", "psbD","psbE", "psbF")
 PS1 <- c("psaA", "psaB","psaC","psaD","psaE","psaF", "psaG", "psaH","psaI","psaJ","psaK","psaL","psaM","psaN","psaO", "psaX")
 Antenna_proteins <- c("apcA","apcB", "cpcA", "cpcB", "cpeA","cpeB", "cpeC" , "cpeD", "cpeE", "cpeR", "cpeS", "cpeT", "cpeU", "cpeY", "cpeZ")
 
n_fixation <- c("nifH","nifD") # (The two usually expressed genes, nifH probably only relevant)
c_fixation <- c("rbcL", "cbbL", "cbbM") #(From KEGG pathway, and oown knowledge) "RubisCo""M00165". 
sunscreen_genes <-  c("scyA","scyB","scyC","scyD","scyE") #scyD is not part of core cassette. (Pichel et al. 2019)
#"ribosomal genes" - ""
Phosphorus_scav_genes <- c("pstS", "pstC", "pstA", "pstB")

# From Ehira and Miyazaki 2015. See refs therein for origin of genes.
  HeteroDiffGenes <- c("ntcA", "hetR")
  SigFac  <- c("sigC", "sigE","sigG") #Sigmafactors related to differentitation triggered by N-starvation

# From √ñsterholm et al. 2020 TS2
  GasVesgenes <- c("gvpW", "gvpV" ,"gvpG","gvpF","gvpK","gvpJ","gvpN","gvpC","gvpA")
  #toxin genes" - ""
     Microcystin <- c("mcyH", "mcyI", "mcyF", "mcyE", "mcyJ", "mcyD", "mcyG", "mcyA", "mcyB", "mcyC")
     Anabaenopeptilide <- c("apdG","apdF","apdE","apdD","apdB", "apdA") #apdBA are pseudogenes
     Anabaenopeptin <- c("aptE", "aphA","aptD","aptC","aptB","aptA2","aptA1")
     Anabaenolysin <- c("camA", "ablA", "ablB", "ablC", "ablD", "ablE")
     Anacyclamide <- c("acyC", "acyB","acyA","acyE","acyF","acyG")
     Anatoxin_a <- c("anaB", "anaC", "anaD", "anaE", "anaF", "anaG", "anaA")
     Hassallidin <- c("hasZ", "hasY", "hasX" ,"hasW" ,"hasV" ,"hasU" ,"hasT" ,"hasS" ,"hasR" ,"hasQ" ,"hasP" ,"hasO" ,"hasN" ,"hasM" ,"hasL" ,"hasK" ,"hasJ" ,"hasI" ,"hasH" ,"hasG" ,"hasF" ,"hasE" ,"hasD" ,"hasC" ,"hasB" ,"hasA")
     Aeruginosin <- c("aerD", "aerE","aerF","aerG1","aerG2","aerA","aerB")  #AerD and AerG1 are pseudogenes
     Anabaenopeptin_Pseudospumigin_Microviridin <- c("spuF", "spuB", "spuA", "hphB", "hphCD", "aptA", "aptB", "aptC", "aptD", "hphA", "aptE", "mvdA", "mvdB", "mvdC", "mvdE")
     Geosmin <- c("cnb1","cnb2" , "geoA")

# From Mihali et al. 2008
  CylindrospermopsinGenes <- c("aoaA","aoaB","aoaC","cyrJ", "cyrA", "cyrB","cyrC", "cyrD", "cyrE", "cyrF", "cyrG", "cyrH", "cyrI", "cyrJ", "cyrK", "cyrL", "cyrM", "cyrN", "cyrO")
  
  #List of genes of interest, also see Ericks list of interesting genes.
VecOfvecs1 <- c(PS2, PS1, Antenna_proteins, n_fixation, c_fixation, sunscreen_genes, Phosphorus_scav_genes, HeteroDiffGenes, SigFac, GasVesgenes,Microcystin, Anabaenopeptilide, Anabaenopeptin, Anabaenolysin, Anacyclamide, Anatoxin_a, Hassallidin, Aeruginosin, Anabaenopeptin_Pseudospumigin_Microviridin, Geosmin, CylindrospermopsinGenes)

VecOfvecs2 <- c("PS2", "PS1", "Antenna_proteins", "n_fixation", "c_fixation", "sunscreen_genes", "Phosphorus_scav_genes", "HeteroDiffGenes", "SigFac", "GasVesgenes", "Microcystin", "Anabaenopeptilide", "Anabaenopeptin", "Anabaenolysin", "Anacyclamide", "Anatoxin_a", "Hassallidin", "Aeruginosin", "Anabaenopeptin_Pseudospumigin_Microviridin", "Geosmin", "CylindrospermopsinGenes")
```

Genes of interest, representing litestyle-choiced and ecological strategies of aphanizomenon were selected based on literature, and included photosystem genes, antenna-proteins, heterocyst differentiation genes and their sigma factors, N and C fixation genes, gas vesicle genes, P-scavenging genes @fig-GenevecPlot. Toxin genes were included in the search but not found. 
```{r fig.width=14, fig.height=10}
#| label: fig-GenevecPlot
#| fig-cap: "The expression patterns of genes in ecologically relevant functions."
#| warning: false
#Plotting the gene expression of genevectors

#How to do it: Mutate in larger categories, mutate in an asterisk if gene is cyclical. Facet wrap on the larger categories
 #mutate(trial = case_when(grepl("map02010", pathway) ~ "map02010",
                        #   grepl("00430", pathway) ~ "00430",
                        #   TRUE ~ "other")) %>%

#Creating a reasonable colour palette for this misery

pathway_colour_palette <- c(
    "Antenna_proteins.apcA"   = "#A6CEE3",
    "Antenna_proteins.apcB"   = "#1F78B4",
    "Antenna_proteins.cpcA"   = "#B2DF8A",
    "Antenna_proteins.cpcB" = "#33A02C",
    "c_fixation.cbbL" = "#A6CEE3",
    "HeteroDiffGenes.hetR" = "#A6CEE3",
    "HeteroDiffGenes.ntcA" = "#1F78B4",
    "n_fixation.nifD" = "#A6CEE3",
    "n_fixation.nifH" = "#1F78B4",
    "GasVesgenes.gvpC" = "#A6CEE3",
    "GasVesgenes.gvpF"= "#1F78B4",
    "GasVesgenes.gvpG" = "#CAB2D6",
    "GasVesgenes.gvpJ" = "#6A3D9A",
    "GasVesgenes.gvpK" ="#B15928",
    "GasVesgenes.gvpN" = "#FB9A99",
    "GasVesgenes.gvpW" = "#B2DF8A",
    "Phosphorus_scav_genes.pstA" = "#A6CEE3",
    "Phosphorus_scav_genes.pstB" = "#1F78B4",
    "Phosphorus_scav_genes.pstC" = "#B2DF8A",
    "Phosphorus_scav_genes.pstS" = "#33A02C",
    "PS1.psaA" = "#A6CEE3",
    "PS1.psaB" = "#1F78B4",
    "PS1.psaC" = "#CAB2D6",
    "PS1.psaD" = "#6A3D9A",
    "PS1.psaE" = "#FFFF99",
    "PS1.psaF" = "#B15928",
    "PS1.psaI" = "#FB9A99",
    "PS1.psaJ" = "#33A02C",
    "PS1.psaK" = "#E31A1C",
    "PS1.psaL" = "#FDBF6F",
    "PS1.psaX" = "#B2DF8A",
    "PS2.psbB" = "#A6CEE3",
    "PS2.psbC" = "#1F78B4",
    "PS2.psbD" = "#B2DF8A",
    "PS2.psbE" = "#33A02C",
    "PS2.psbF" = "#FB9A99",
    "SigFac.sigC" = "#A6CEE3",
    "SigFac.sigE" = "#1F78B4",
    "SigFac.sigG" = "#B2DF8A"
)

 filtered_genes_and_paths_top50 %>%
  mutate(type = ifelse(
    Geneid %in% c(
      cyc.genes.tres %>% filter(type == "sig") %>% distinct(Geneid) %>% pull(Geneid)
      ), paste0("sig"), paste0("non-sig")
    )) %>%
  left_join(eggnog_table %>% distinct(Predicted_protein_name, Geneid), by = "Geneid") %>%
  group_by(Predicted_protein_name, dates) %>%
  summarise(tpm = sum(tpm)) %>%
  ungroup() %>%
  mutate(Cats = case_when(Predicted_protein_name %in% PS2 ~ paste0(VecOfvecs2[1]),
                          Predicted_protein_name %in% PS1 ~ paste0(VecOfvecs2[2]),
                          Predicted_protein_name %in% Antenna_proteins ~ paste0(VecOfvecs2[3]),
                          Predicted_protein_name %in% n_fixation ~ paste0(VecOfvecs2[4]),
                          Predicted_protein_name %in% c_fixation ~ paste0(VecOfvecs2[5]),
                          Predicted_protein_name %in% sunscreen_genes ~ paste0(VecOfvecs2[6]),
                          Predicted_protein_name %in% Phosphorus_scav_genes ~ paste0(VecOfvecs2[7]),
                          Predicted_protein_name %in% HeteroDiffGenes ~ paste0(VecOfvecs2[8]),
                          Predicted_protein_name %in% SigFac ~ paste0(VecOfvecs2[9]),
                          Predicted_protein_name %in% GasVesgenes ~ paste0(VecOfvecs2[10]),
                          Predicted_protein_name %in% Microcystin ~ paste0(VecOfvecs2[11]),
                          Predicted_protein_name %in% Anabaenopeptilide ~ paste0(VecOfvecs2[12]),
                          Predicted_protein_name %in% Anabaenopeptin ~ paste0(VecOfvecs2[13]),
                          Predicted_protein_name %in% Anabaenolysin ~ paste0(VecOfvecs2[14]),
                          Predicted_protein_name %in% Anacyclamide ~ paste0(VecOfvecs2[15]),
                          Predicted_protein_name %in% Anatoxin_a ~ paste0(VecOfvecs2[16]),
                          Predicted_protein_name %in% Hassallidin ~ paste0(VecOfvecs2[17]),
                          Predicted_protein_name %in% Aeruginosin ~ paste0(VecOfvecs2[18]),
                          Predicted_protein_name %in% Anabaenopeptin_Pseudospumigin_Microviridin ~ paste0(VecOfvecs2[19]),
                          Predicted_protein_name %in% Geosmin ~ paste0(VecOfvecs2[20]),
                          Predicted_protein_name %in% CylindrospermopsinGenes ~ paste0(VecOfvecs2[21]),
                          TRUE ~ "Other")) %>%
  filter(Cats != "Other") %>%
  mutate(Group = paste(Cats, Predicted_protein_name, sep = ".")) %>%
  ggplot(mapping = aes(x = dates, y = tpm, group = Predicted_protein_name, colour = Group)) +
  geom_line() +
  facet_wrap(~ Cats, scales = "free_y") +
  theme_classic() +
  theme(
        axis.title.x = element_blank(),
        axis.text.x = element_text(size = 9),
        axis.text.y = element_text(size = 9),
        strip.placement = "outside",
        strip.text = element_text(size = 9),
        plot.margin = margin(t = 1, r = 1, b = 0, l = 1, "lines"),
        legend.position = "bottom",
        legend.text = element_text(size = 9)
    ) +
  scale_colour_manual('Gene', values = pathway_colour_palette) +
  guides(colour=guide_legend(nrow=4,byrow=FALSE)) +
  scale_x_date(date_breaks = "2 months", date_labels = "%b")
```

## Short info on winter activities, relate to Sved√©n et al. 2015.
